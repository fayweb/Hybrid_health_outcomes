# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# ***********************************************************
# Title: Predicting the Health Outcomes of Parasite Infections in Hybrid Mice
#
# Purpose: This master script initializes the project environment,
#          including all standard settings, package installations,
#          data paths, and custom functions required to conduct
#          comprehensive analyses. It sets a consistent and reproducible
#          foundation for importing, cleaning, visualizing, normalizing,
#          imputing, analyzing, and modeling infection health outcomes
#          in laboratory and wild hybrid mouse populations.
#
# Workflow Structure:
#   1. Standard settings: Set seeds, load libraries, define paths
#   2. Custom function definitions: Create functions to aid visualization
#      and statistical distribution testing.
#   3. Prepare data paths: Dynamically define file paths for efficient
#      and reproducible data handling.
#   4. Data cleaning and preparation (lab and field)
#   5. Merge, normalize, and impute data
#   6. Laboratory infection analysis (PCA, linear models)
#   7. Random forest model development and validation
#   8. Wild mouse analysis and cross-population validation
#
# Author: Fay Webster
# Date: Initiated October 13, 2023
# ***********************************************************
# ***********************************************************
# Part 1: Set Standard Settings & Load Packages ----
# ***********************************************************
# Install packages/load libraries to maintain a stable R environment
options(ggrepel.max.overlaps = Inf)
library(pacman)
# Seed for reproducibility
set.seed(13102023)
# Load necessary packages using pacman
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork, FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools, modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext, kableExtra, webshot, broom, flextable,
viridis)
# ***********************************************************
# Part 2: Define Project File Paths ----
# ***********************************************************
# Code directories
c <- "code"
clab <- paste0(c, "/lab/")
cfield <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # Experimental project design
nmi <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# Data directories
user_profile <- Sys.getenv("USERPROFILE")
one_drive <- file.path(user_profile, "OneDrive", "Documents", "GitHub", "Hybrid_health_outcomes")
d <- paste0(one_drive, "/data")
# Lab data paths
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# Field data paths
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# Data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# Output directories
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables <- paste0(output, "/tables")
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
# ***********************************************************
# Part 3: Define Custom Functions ----
# ***********************************************************
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
#----------------------------------------------------------*
# 6.4.1: Random Forest Model Diagnostics
# Generate diagnostic plots and performance validation for RF model
# Purpose: Validate model assumptions and create supplementary figures
# Requires: Trained RF model, test set predictions, cross-validation results
# Creates: Diagnostic plots (residuals, Q-Q, CV performance), correlation matrix, model comparison table
#----------------------------------------------------------*
if (0) source(file.path("code/analysis/lab_infections/random_forest_diagnostics.R"))
#----------------------------------------------------------*
# 6.4: Random Forest Model Development
# Train and validate random forest model on laboratory data
# Purpose: Build predictive model for weight loss based on immune gene expression
# Requires: Challenge dataset with complete immune gene data and weight loss outcomes
# Creates: Trained random forest model, performance metrics, variable importance
#----------------------------------------------------------*
if (1) source(file.path("code/analysis/lab_infections/random_forest_training.R"))
# ***********************************************************
# Script 7.1: Apply Random Forest Model to Wild Mice
# ***********************************************************
# Purpose: Apply laboratory-trained RF model to predict weight loss in wild mice
# Requires: Trained RF model, hm dataset with immune gene expression data
# Creates: hm dataset with predicted weight loss values, application summary stats
cat(strrep("=", 60), "\n")
cat("APPLYING RANDOM FOREST MODEL TO WILD MICE\n")
cat(strrep("=", 60), "\n")
# ---- Import Data ----
cat("Loading datasets...\n")
# Load the complete dataset
if (!exists("hm")) {
hm <- read.csv("data/analysis/final/hm_ready_for_analysis.csv")
}
# Filter for field mice only
Field <- hm %>%
filter(origin == "Field")
cat("✓ Loaded", nrow(Field), "wild-caught mice\n")
# ---- Load Random Forest Model ----
cat("Loading trained random forest model...\n")
# Load the trained model
weight_loss_predict <- readRDS("code/models/WL_predict_gene.rds")
cat("✓ Random forest model loaded successfully\n")
cat("  - Model type:", class(weight_loss_predict)[1], "\n")
cat("  - Number of trees:", weight_loss_predict$ntree, "\n")
cat("  - Variables used:", length(weight_loss_predict$forest$xlevels), "\n")
# ---- Prepare Gene Expression Data ----
cat("Preparing immune gene expression data for prediction...\n")
# Select gene columns for prediction
genes_for_prediction <- Field %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
cat("✓ Extracted", ncol(genes_for_prediction), "immune genes for", nrow(genes_for_prediction), "mice\n")
# Check for missing values
missing_genes <- colSums(is.na(genes_for_prediction))
if (any(missing_genes > 0)) {
cat("⚠ Warning: Missing values detected in gene expression data:\n")
print(missing_genes[missing_genes > 0])
} else {
cat("✓ No missing values in gene expression data\n")
}
# ---- Apply Random Forest Model ----
cat("Generating weight loss predictions...\n")
# Set seed for reproducibility
set.seed(540)
# Generate predictions using the trained RF model
predicted_WL <- predict(weight_loss_predict, genes_for_prediction)
cat("✓ Predictions generated for", length(predicted_WL), "mice\n")
# ---- Add Predictions to Dataset ----
cat("Adding predictions to field dataset...\n")
# Add predictions to Field dataset
Field$predicted_weight_loss <- predicted_WL
# Also add to the main hm dataset for other scripts
hm$predicted_weight_loss <- NA
hm$predicted_weight_loss[hm$origin == "Field"] <- predicted_WL
cat("✓ Predictions added to datasets\n")
# ---- Summary Statistics ----
cat("PREDICTION SUMMARY STATISTICS:\n")
cat(strrep("-", 30), "\n")
prediction_summary <- summary(predicted_WL)
print(prediction_summary)
cat("\nPrediction distribution:\n")
cat("Mean ± SD:", round(mean(predicted_WL), 2), "±", round(sd(predicted_WL), 2), "\n")
cat("Range:", round(min(predicted_WL), 2), "to", round(max(predicted_WL), 2), "\n")
cat("IQR:", round(quantile(predicted_WL, 0.25), 2), "to", round(quantile(predicted_WL, 0.75), 2), "\n")
# Check for extreme predictions
extreme_low <- sum(predicted_WL < 0)
extreme_high <- sum(predicted_WL > 30)
cat("Extreme predictions: <0%:", extreme_low, " | >30%:", extreme_high, "\n")
# Continue with validation immediately
cat("\n", strrep("=", 60), "\n")
cat("STARTING FIELD VALIDATION ANALYSES\n")
cat(strrep("=", 60), "\n")
# Check if the data is still there
head(hm$predicted_weight_loss, 10)
summary(hm$predicted_weight_loss)
head(Field$predicted_weight_loss, 10)
# Save the datasets with predictions
write.csv(hm, "data/analysis/final/hm_with_predictions.csv", row.names = FALSE)
write.csv(Field, "data/analysis/final/field_with_predictions.csv", row.names = FALSE)
# Confirm the save
cat("✓ Saved hm dataset with predictions:", nrow(hm), "rows\n")
cat("✓ Saved field dataset with predictions:", nrow(Field), "rows\n")
source("~/GitHub/Hybrid_health_outcomes/code/master_hm.R", echo = TRUE)
# Count missing values per gene
sapply(genes, function(x) sum(is.na(x)))
# Optional: check lab and field subsets
sapply(gl, function(x) sum(is.na(x)))
sapply(gf, function(x) sum(is.na(x)))
meth <- init$method  # just in case you want to customize methods
# Aggregation plot
jpeg(paste0(fi, "/aggregation_plot.jpeg"), width = 8, height = 6, units = "in", res = 300)
aggr(genes, col = c("navyblue", "red"), numbers = TRUE, sortVars = TRUE,
labels = names(genes), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data", "Pattern"))
dev.off()
# Margin plots for selected genes
jpeg(paste0(fi, "/margin_plots.jpeg"), width = 16, height = 12, units = "in", res = 300)
par(mfrow = c(2, 2))
marginplot(genes[, c("IFNy", "IRGM1")])
marginplot(genes[, c("IL.6", "IRGM1")])
marginplot(genes[, c("TICAM1", "IRGM1")])
marginplot(genes[, c("MUC5AC", "IRGM1")])
par(mfrow = c(1, 1))
dev.off()
# Remove gene with too much missing data
genes <- genes[, !(names(genes) %in% "IL.10")]
igf <- mice(genes, m = 5, seed = 500)  # default method unless customized via 'meth'
summary(igf)
# Extract complete imputed dataset (first of 5)
complete_genes <- complete(igf, 1)
# Multiply by -1 so that higher values = higher expression
complete_genes[] <- -1 * complete_genes
# Attach Mouse_ID and merge back into metadata
result <- data.frame(Mouse_ID = hm$Mouse_ID, complete_genes)
hm_imp <- hm %>%
dplyr::select(-c(all_of(Genes_v), GAPDH, PPIB)) %>%
left_join(result, by = "Mouse_ID")
# ***********************************************************
# Title: Predicting the Health Outcomes of Parasite Infections in Hybrid Mice
#
# Purpose: This master script initializes the project environment,
#          including all standard settings, package installations,
#          data paths, and custom functions required to conduct
#          comprehensive analyses. It sets a consistent and reproducible
#          foundation for importing, cleaning, visualizing, normalizing,
#          imputing, analyzing, and modeling infection health outcomes
#          in laboratory and wild hybrid mouse populations.
#
# Workflow Structure:
#   1. Standard settings: Set seeds, load libraries, define paths
#   2. Custom function definitions: Create functions to aid visualization
#      and statistical distribution testing.
#   3. Prepare data paths: Dynamically define file paths for efficient
#      and reproducible data handling.
#   4. Data cleaning and preparation (lab and field)
#   5. Merge, normalize, and impute data
#   6. Laboratory infection analysis (PCA, linear models)
#   7. Random forest model development and validation
#   8. Wild mouse analysis and cross-population validation
#
# Author: Fay Webster
# Date: Initiated October 13, 2023
# ***********************************************************
# ***********************************************************
# Part 1: Set Standard Settings & Load Packages ----
# ***********************************************************
# Install packages/load libraries to maintain a stable R environment
options(ggrepel.max.overlaps = Inf)
library(pacman)
# Seed for reproducibility
set.seed(13102023)
# Load necessary packages using pacman
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork, FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools, modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext, kableExtra, webshot, broom, flextable,
viridis)
# ***********************************************************
# Part 2: Define Project File Paths ----
# ***********************************************************
# Code directories
c <- "code"
clab <- paste0(c, "/lab/")
cfield <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # Experimental project design
nmi <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# Data directories
user_profile <- Sys.getenv("USERPROFILE")
one_drive <- file.path(user_profile, "OneDrive", "Documents", "GitHub", "Hybrid_health_outcomes")
d <- paste0(one_drive, "/data")
# Lab data paths
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# Field data paths
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# Data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# Output directories
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables <- paste0(output, "/tables")
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
# ***********************************************************
# Part 3: Define Custom Functions ----
# ***********************************************************
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# Count missing values per gene
sapply(genes, function(x) sum(is.na(x)))
# Optional: check lab and field subsets
sapply(gl, function(x) sum(is.na(x)))
sapply(gf, function(x) sum(is.na(x)))
# Create MICE structure to explore patterns
init <- mice(genes, maxit = 0)
meth <- init$method  # just in case you want to customize methods
# Aggregation plot
jpeg(paste0(fi, "/aggregation_plot.jpeg"), width = 8, height = 6, units = "in", res = 300)
aggr(genes, col = c("navyblue", "red"), numbers = TRUE, sortVars = TRUE,
labels = names(genes), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data", "Pattern"))
dev.off()
# Margin plots for selected genes
jpeg(paste0(fi, "/margin_plots.jpeg"), width = 16, height = 12, units = "in", res = 300)
par(mfrow = c(2, 2))
marginplot(genes[, c("IFNy", "IRGM1")])
dev.off()
dev.off()
# Margin plots for selected genes
jpeg(paste0(fi, "/margin_plots.jpeg"), width = 16, height = 12, units = "in", res = 300)
# Aggregation plot
jpeg(paste0(fi, "/aggregation_plot.jpeg"), width = 8, height = 6, units = "in", res = 300)
aggr(genes, col = c("navyblue", "red"), numbers = TRUE, sortVars = TRUE,
labels = names(genes), cex.axis = .7, gap = 3,
ylab = c("Histogram of missing data", "Pattern"))
dev.off()
# Margin plots for selected genes
jpeg(paste0(fi, "/margin_plots.jpeg"), width = 16, height = 12, units = "in", res = 300)
par(mfrow = c(2, 2))
marginplot(genes[, c("IFNy", "IRGM1")])
marginplot(genes[, c("IL.6", "IRGM1")])
marginplot(genes[, c("TICAM1", "IRGM1")])
marginplot(genes[, c("MUC5AC", "IRGM1")])
par(mfrow = c(1, 1))
dev.off()
# Remove gene with too much missing data
genes <- genes[, !(names(genes) %in% "IL.10")]
igf <- mice(genes, m = 5, seed = 500)  # default method unless customized via 'meth'
summary(igf)
# Extract complete imputed dataset (first of 5)
complete_genes <- complete(igf, 1)
# Multiply by -1 so that higher values = higher expression
complete_genes[] <- -1 * complete_genes
# Attach Mouse_ID and merge back into metadata
result <- data.frame(Mouse_ID = hm$Mouse_ID, complete_genes)
hm_imp <- hm %>%
dplyr::select(-c(all_of(Genes_v), GAPDH, PPIB)) %>%
left_join(result, by = "Mouse_ID")
# Optional: check differences
outersect(colnames(hm_imp), colnames(hm))
# Save cleaned, imputed dataset
write.csv(hm_imp, paste0(danal_final, "/imputed_clean_data.csv"), row.names = FALSE)
# Overwrite main object
hm <- hm_imp
rm(complete_genes, gmf, gf, gl, gml, hm_imp, init, igf, result,
genes_matrix, genes, field, lab)
