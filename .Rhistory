# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
# Add custom colours for parasites throughout the scripts
# Creates factor levels for parasite strains
#----------------------------------------------------------*
# ***********************************************************
# Part 5: Experimental Design of Laboratory Infections ----
# ***********************************************************
# Purpose: Summarize the experimental setup in the lab infections.
# Outputs: Clean design tables, plots of experimental groups, timepoints
# 5.1: Summarize experimental groups and setup
if (0) source(file.path(cdesign, "design_tables_paper.R"))
if (0) source(file.path(cdesign, "design_experimental.R"))
# 5.2 Measurement Methods: Weight, OPG, qPCR
if (0) source(file.path(cdesign, "design_field_quantification_methods.R"))
# This script explains how weight, oocysts, and parasite burden were quantified
# It can generate a supplementary table or explanatory paragraph
# 5.3 Immune Gene Panel: Target selection and references
if (0) source(file.path(cdesign, "design_immune_genes.R"))
# Details which genes were selected and why
# Can generate a table of target genes, reference genes, primer source, etc.
# 5.4 Eimeria Quantification Pipeline
if (0) source(file.path(cdesign, "design_quantification_eimeria.R"))
# Explains how qPCR or microscopy counts were processed
# Outputs: summary stats, method explanation (can go in methods/supp)
# 5.5 Modeling Strategy: Outcome, predictors, covariates
if (0) source(file.path(cdesign, "design_models.R"))
# Describes the rationale for using weight loss as outcome, infection as predictor
# Sets up linear model structures for downstream analysis (Part 6)
# WOrking with fieldoratory data only
# Select genes
field  <- hm %>%
dplyr::filter(origin == "Field")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# WOrking with fieldoratory data only
# Select genes
field  <- hm %>%
dplyr::filter(origin == "Field")
hm <- read.csv("data/analysis/final/hm_ready_for_analysis.csv")
field <- hm %>%
filter(origin == "Field")
field <- hm %>%
filter(origin == "Field")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ species_Eimeria", sep = " "))
lm(lm_formula, data = field)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
# Filter out intercept terms
tidy_models_no_intercept <- tidy_models[!grepl("intercept", tidy_models$term, ignore.case = TRUE),]
tidy_models_no_intercept <- as.data.frame(tidy_models_no_intercept) %>%
mutate(term = case_when(
term == "species_EimeriaE. falciformis" ~ "E. falciformis",
term == "species_EimeriaE. ferrisi" ~ "E. ferrisi",
))
# Determine the common y-axis range
common_y_limits <- range(-7,7)
# Create the coefficient plot
coef_mmr_B <- ggplot(tidy_models_no_intercept, aes(x = model, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(width = 0.5)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
scale_color_manual(values = c("E. falciformis" = "#FF0000", "E. ferrisi" = "#7A0092")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
labs(x = "Gene", y = "Coefficients estimate (Difference to uninfected)") +
scale_y_continuous(limits = common_y_limits) +  # Apply shared y-axis limits
theme(legend.title = element_blank(),
legend.position = "none")
print(coef_mmr_B)
ggsave(filename = paste0(an_fi, "/coef_plot_field_genes.pdf"),
plot = coef_mmr_B, width = 6, height = 4, dpi = 300)
# ***********************************************************
# Title: Predicting the Health Outcomes of Parasite Infections in Hybrid Mice
#
# Purpose: This master script initializes the project environment,
#          including all standard settings, package installations,
#          data paths, and custom functions required to conduct
#          comprehensive analyses. It sets a consistent and reproducible
#          foundation for importing, cleaning, visualizing, normalizing,
#          imputing, analyzing, and modeling infection health outcomes
#          in laboratory and wild hybrid mouse populations.
#
# Workflow Structure:
#   1. Standard settings: Set seeds, load libraries, define paths
#   2. Custom function definitions: Create functions to aid visualization
#      and statistical distribution testing.
#   3. Prepare data paths: Dynamically define file paths for efficient
#      and reproducible data handling.
#
# Author: Fay Webster
# Date: Initiated October 13, 2023
# ***********************************************************
# ***********************************************************
# Part 1: Set Standard Settings & Load Packages ----
# ***********************************************************
# Install packages/load libraries to maintain a stable R environment
options(ggrepel.max.overlaps = Inf)
library(pacman)
# Seed for reproducibility
set.seed(13102023)
# Load necessary packages using pacman
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork, FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools, modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext, kableExtra, webshot, broom, flextable)
# ***********************************************************
# Part 2: Define Project File Paths ----
# ***********************************************************
# Code directories
c <- "code"
clab <- paste0(c, "/lab/")
cfield <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # Experimental project design
nmi <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# Data directories
user_profile <- Sys.getenv("USERPROFILE")
one_drive <- file.path(user_profile, "OneDrive", "Documents", "GitHub", "Hybrid_health_outcomes")
d <- paste0(one_drive, "/data")
# Lab data paths
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# Field data paths
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# Data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# Output directories
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables <- paste0(output, "/tables")
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
# ***********************************************************
# Part 3: Define Custom Functions ----
# ***********************************************************
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
# Add custom colours for parasites throughout the scripts
# Creates factor levels for parasite strains
#----------------------------------------------------------*
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ current_infection", sep = " "))
lm(lm_formula, data = lab)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
# Filter out intercept terms
tidy_models_no_intercept <- tidy_models[!grepl("intercept", tidy_models$term, ignore.case = TRUE),]
tidy_models_no_intercept <- as.data.frame(tidy_models_no_intercept) %>%
mutate(term = case_when(
term == "current_infectionE. falciformis" ~ "E. falciformis",
term == "current_infectionE. ferrisi" ~ "E. ferrisi",
))
# Determine the common y-axis range
common_y_limits <- range(-7,7)
coef_mmr <- ggplot(tidy_models_no_intercept, aes(x = model, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(width = 0.5)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
scale_color_manual(values = c("E. falciformis" = "#FF0000", "E. ferrisi" = "#7A0092")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
labs(x = "Gene", y = "Coefficients estimate (Difference to uninfected)") +
scale_y_continuous(limits = common_y_limits) +  # Apply shared y-axis limits
theme(legend.title = element_blank(),
legend.position = "none")
print(coef_mmr)
ggsave(filename = paste0(an_fi, "/coef_plot_lab_genes.pdf"),
plot = coef_mmr, width = 6, height = 4, dpi = 300)
print(coef_mmr)
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ current_infection", sep = " "))
lm(lm_formula, data = lab)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
names
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
tidy_models
# Filter out intercept terms
tidy_models_no_intercept <- tidy_models[!grepl("intercept", tidy_models$term, ignore.case = TRUE),]
tidy_models_no_intercept <- as.data.frame(tidy_models_no_intercept) %>%
mutate(term = case_when(
term == "current_infectionE. falciformis" ~ "E. falciformis",
term == "current_infectionE. ferrisi" ~ "E. ferrisi",
))
# Determine the common y-axis range
common_y_limits <- range(-7,7)
coef_mmr <- ggplot(tidy_models_no_intercept, aes(x = model, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(width = 0.5)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
scale_color_manual(values = c("E. falciformis" = "#FF0000", "E. ferrisi" = "#7A0092")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
labs(x = "Gene", y = "Coefficients estimate (Difference to uninfected)") +
scale_y_continuous(limits = common_y_limits) +  # Apply shared y-axis limits
theme(legend.title = element_blank(),
legend.position = "none")
print(coef_mmr)
ggsave(filename = paste0(an_fi, "/coef_plot_lab_genes.pdf"),
plot = coef_mmr, width = 6, height = 4, dpi = 300)
####################################################
####################################################
############################# gene expression distribution
lab %>%
pivot_longer(cols = all_of(dependent_vars),
names_to = "Genes", values_to = "Expression") %>%
ggplot(aes(x = Expression, fill = current_infection)) +
ggdist::stat_halfeye(
adjust = .5,
width = .6,
alpha = 0.5,
.width = 0,
justification = -.2,
point_colour = NA,
orientation = "y"  # Set orientation to y
) +
geom_boxplot(position = "dodge2",
width = .5,
outlier.shape = NA,
orientation = "y"  # Set orientation to y
) +
facet_wrap(~Genes,  scales = 'free', ncol = 4) +
labs(x = "Expression Level", y = "Density") +
theme_minimal() +
scale_fill_manual(values = color_mapping, labels = labels)  +
theme(legend.title = element_blank(),
legend.position = c(0.85, 0.06),
legend.text = element_markdown())+
labs(y = "Density",
x = "Gene expression level") -> density_imm
density_imm
density_imm
ggsave(filename = paste0(an_fi, "/density_immune_genes.jpeg"),
plot = density_imm, width = 10, height = 8, dpi = 300)
#######################
# combine
comb <- (density_imm | coef_mmr) +
#  plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
comb <- comb +
plot_annotation(title = 'Fig. 2',
theme = theme(plot.title = element_text(size = 20, hjust = 0)))
comb <- comb +
plot_layout(heights = c(1, 1),
widths = c(2, 1))
# Save the panel figure
ggsave(paste0(panels_fi, "/panel_immune_gene_expression_lab.jpeg"),
comb, width = 12, height = 6, dpi = 300)
# Update gene names to replace "." with "-" and "IFNg" with "IFNy"
regression_table <- tidy_models_no_intercept %>%
dplyr::select(model, term, estimate, std.error, conf.low, conf.high, p.value) %>%
mutate(
model = gsub("\\.", "-", model),  # Replace "." with "-"
model = gsub("IFNg", "IFNy", model),  # Replace "IFNg" with "IFNy"
significance = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)
) %>%
rename(
Gene = model,
'Treatment group' = term,
Estimate = estimate,
`Std. Error` = std.error,
`CI Lower` = conf.low,
`CI Upper` = conf.high,
`P-value` = p.value,
`Significance` = significance
)
# Create the formatted table with kableExtra
publication_table <- regression_table %>%
kbl(
caption = "Table 1: Regression results for immune gene expression in E. ferrisi and E. falciformis-infected mice in controlled experiments",
format = "html",  # Or "latex" for LaTeX output
digits = 3  # Control the number of decimal places
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F) %>%
column_spec(1, bold = TRUE) %>%  # Bold gene names for emphasis
add_header_above(c(" " = 2, "Regression Estimates" = 5, " " = 1)) %>%  # Custom header, include space for "Significance"
footnote(
general = "Significance codes: '***' 0.001 '**' 0.01 '*' 0.05",
footnote_as_chunk = TRUE
)
# Create the formatted table with kableExtra
publication_table <- regression_table %>%
kbl(
caption = "Table 1: Regression results for immune gene expression in E. ferrisi and E. falciformis-infected mice in controlled experiments",
format = "html",  # Or "latex" for LaTeX output
digits = 3  # Control the number of decimal places
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F) %>%
column_spec(1, bold = TRUE) %>%  # Bold gene names for emphasis
add_header_above(c(" " = 2, "Regression Estimates" = 5, " " = 1)) %>%  # Custom header, include space for "Significance"
footnote(
general = "Significance codes: '***' 0.001 '**' 0.01 '*' 0.05",
footnote_as_chunk = TRUE
)
install.packages("kableExtra")
install.packages("kableExtra")
