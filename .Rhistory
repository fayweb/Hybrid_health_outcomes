infection_colors <- c("Infected with Eimeria spp." = "#FF0028", "Uninfected" = "#4ACAFF")
# Prepare data for raincloud plot - create clean labels
Field_raincloud <- Field_status %>%
mutate(
infection_label = case_when(
infection_status == TRUE ~ "Infected with Eimeria spp.",
infection_status == FALSE ~ "Uninfected",
TRUE ~ as.character(infection_status)
)
) %>%
drop_na(infection_label, predicted_weight_loss)
# Create raincloud plot
raincloud_plot <- Field_raincloud %>%
ggplot(aes(y = infection_label, x = predicted_weight_loss, fill = infection_label)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
alpha = 0.7,
.width = 0,
justification = -0.2,
point_colour = NA
) +
scale_fill_manual(values = infection_colors) +
geom_boxplot(
width = 0.15,
outlier.shape = NA
) +
ggdist::stat_dots(
side = "left",
justification = 1.1,
binwidth = 0.25,
alpha = 0.5
) +
geom_point(
shape = 95,
size = 15,
alpha = 0.2,
color = "gray50",
position = position_dodge(width = 0.75)
) +
theme_minimal() +
labs(
y = "Infection status with *Eimeria* spp.",
x = "Predicted weight loss",
fill = "Infection status"
) +
theme(
legend.position = "none",
axis.title.y = element_markdown(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
# Display the plot
print(raincloud_plot)
# Save the plot
ggsave(
plot = raincloud_plot,
filename = paste0(an_fi, "/raincloud_infection_status.pdf"),
width = 6,
height = 4,
dpi = 300
)
source("~/GitHub/Hybrid_health_outcomes/code/analysis/wild_mice/validate_infection_intensity.R", echo = TRUE)
source("~/GitHub/Hybrid_health_outcomes/code/analysis/wild_mice/validate_infection_intensity.R", echo = TRUE)
# ***********************************************************
# Title: Predicting the Health Outcomes of Parasite Infections in Hybrid Mice
#
# Purpose: This master script initializes the project environment,
#          including all standard settings, package installations,
#          data paths, and custom functions required to conduct
#          comprehensive analyses. It sets a consistent and reproducible
#          foundation for importing, cleaning, visualizing, normalizing,
#          imputing, analyzing, and modeling infection health outcomes
#          in laboratory and wild hybrid mouse populations.
#
# Workflow Structure:
#   1. Standard settings: Set seeds, load libraries, define paths
#   2. Custom function definitions: Create functions to aid visualization
#      and statistical distribution testing.
#   3. Prepare data paths: Dynamically define file paths for efficient
#      and reproducible data handling.
#   4. Data cleaning and preparation (lab and field)
#   5. Merge, normalize, and impute data
#   6. Laboratory infection analysis (PCA, linear models)
#   7. Random forest model development and validation
#   8. Wild mouse analysis and cross-population validation
#
# Author: Fay Webster
# Date: Initiated October 13, 2023
# ***********************************************************
# ***********************************************************
# Part 1: Set Standard Settings & Load Packages ----
# ***********************************************************
# Install packages/load libraries to maintain a stable R environment
options(ggrepel.max.overlaps = Inf)
library(pacman)
# Seed for reproducibility
set.seed(13102023)
# Load necessary packages using pacman
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork, FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools, modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext, kableExtra, webshot, broom, flextable,
viridis)
# ***********************************************************
# Part 2: Define Project File Paths ----
# ***********************************************************
# Code directories
c <- "code"
clab <- paste0(c, "/lab/")
cfield <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # Experimental project design
nmi <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# Data directories
user_profile <- Sys.getenv("USERPROFILE")
one_drive <- file.path(user_profile, "OneDrive", "Documents", "GitHub", "Hybrid_health_outcomes")
d <- paste0(one_drive, "/data")
# Lab data paths
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# Field data paths
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# Data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# Output directories
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables <- paste0(output, "/tables")
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
# ***********************************************************
# Part 3: Define Custom Functions ----
# ***********************************************************
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
source("~/GitHub/Hybrid_health_outcomes/code/analysis/lab_infections/pca_immune_genes.R", echo = TRUE)
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# Model 1: PC axes only (simple immune signature model)
model_pc_only <- lm(WL_max ~ PC1 + PC2, data = lab)
cat("Model 1: PC axes only\n")
summary(model_pc_only)
# Model 2: Complete model with all covariates
model_complete <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization + weight_dpi0, data = lab)
cat("\nModel 2: Complete model\n")
summary(model_complete)
# Model 3: Interaction model (main biological interest)
model_interaction <- lm(WL_max ~ PC1 * current_infection + PC2 * current_infection,
data = lab)
cat("\nModel 3: Interaction model\n")
summary(model_interaction)
# Create model list
models_comparison <- list(
"PC Only" = model_pc_only,
"Complete" = model_complete,
"Interaction" = model_interaction
)
# Create clean comparison table
comparison_table <- modelsummary(
models_comparison,
output = "gt",
stars = c('*' = .05, '**' = .01, '***' = .001),
coef_map = c(
"(Intercept)" = "Intercept",
"PC1" = "PC1 (Inflammatory)",
"PC2" = "PC2 (Regulatory)",
"current_infectionE. ferrisi" = "<i>E. ferrisi</i> infection",
"current_infectionE. falciformis" = "<i>E. falciformis</i> infection",
"delta_ct_cewe_MminusE" = "Infection intensity",
"weight_dpi0" = "Initial body weight",
"PC1:current_infectionE. ferrisi" = "PC1 × <i>E. ferrisi</i>",
"PC1:current_infectionE. falciformis" = "PC1 × <i>E. falciformis</i>",
"current_infectionE. ferrisi:PC2" = "PC2 × <i>E. ferrisi</i>",
"current_infectionE. falciformis:PC2" = "PC2 × <i>E. falciformis</i>"
),
gof_map = c("nobs", "r.squared", "adj.r.squared", "statistic", "p.value"),
notes = c("Reference: Uninfected controls",
"Mouse strain effects omitted for clarity")
) %>%
tab_header(
title = "Linear regression models: Immune signatures predict weight loss",
subtitle = "Comparison of three modeling approaches"
) %>%
tab_footnote(
footnote = "PC1: inflammatory genes; PC2: regulatory genes"
) %>%
cols_label(
"PC Only" = "Immune Only",
"Complete" = "Full Model",
"Interaction" = "Interaction"
)
# Save comparison table
save_table_all_formats(comparison_table, "pca_regression_comparison")
# Create a focused table for just the interaction model
interaction_only_table <- modelsummary(
list("Interaction Model" = model_interaction),
output = "gt",
stars = c('*' = .05, '**' = .01, '***' = .001),
coef_map = c(
"(Intercept)" = "Intercept",
"PC1" = "PC1 (Inflammatory)",
"PC2" = "PC2 (Regulatory)",
"current_infectionE. ferrisi" = "E. ferrisi infection",
"current_infectionE. falciformis" = "E. falciformis infection",
"PC1:current_infectionE. ferrisi" = "PC1 × E. ferrisi",
"PC1:current_infectionE. falciformis" = "PC1 × E. falciformis",
"current_infectionE. ferrisi:PC2" = "PC2 × E. ferrisi",
"current_infectionE. falciformis:PC2" = "PC2 × E. falciformis"
),
gof_map = c("nobs", "r.squared", "adj.r.squared", "statistic", "p.value"),
notes = "Reference group: Uninfected controls"
) %>%
tab_header(
title = "Interaction Model: Immune Signatures × Parasite Species",
subtitle = "Principal components predicting weight loss by infection group"
)
# Save interaction table
save_table_all_formats(interaction_only_table, "interaction_model_detailed")
# Create coefficient plot comparing all three models
coef_comparison_plot <- plot_summs(
model_pc_only, model_complete, model_interaction,
colors = c("#1f77b4", "#ff7f0e", "#2ca02c"),
point.size = 3,
model.names = c("PC Only", "Complete", "Interaction"),
coefs = c("PC1", "PC2", "current_infectionE. ferrisi", "current_infectionE. falciformis",
"PC1:current_infectionE. ferrisi", "PC1:current_infectionE. falciformis",
"current_infectionE. ferrisi:PC2", "current_infectionE. falciformis:PC2")
) +
labs(
# title = "Coefficient comparison Across Models",
x = "Coefficient Estimate",
y = "Model Terms"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, hjust = 0.5),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12)
)
# Save coefficient plot
ggsave(
filename = paste0(an_fi, "/coefficient_comparison_pca_models.jpeg"),
plot = coef_comparison_plot,
width = 10, height = 6, dpi = 300
)
# PC1 × Infection interaction plot
pc1_interaction_plot <- ggpredict(model_interaction, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
scale_color_manual(values = color_mapping, labels = labels) +
scale_fill_manual(values = color_mapping, labels = labels) +
labs(
title = NULL,
x = "PC1 (Inflammatory Genes)",
y = "Predicted Weight Loss (%)",
color = "Infection Group"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_markdown()
)
# PC2 × Infection interaction plot
pc2_interaction_plot <- ggpredict(model_interaction, terms = c("PC2", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
scale_color_manual(values = color_mapping, labels = labels) +
scale_fill_manual(values = color_mapping, labels = labels) +
labs(
title = NULL,
x = "PC2 (Regulatory Genes)",
y = "Predicted Weight Loss (%)",
color = "Infection Group"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_markdown()
)
# Save interaction plots
ggsave(
filename = paste0(an_fi, "/pc1_infection_interaction.png"),
plot = pc1_interaction_plot,
width = 8, height = 6, dpi = 300
)
ggsave(
filename = paste0(an_fi, "/pc2_infection_interaction.png"),
plot = pc2_interaction_plot,
width = 8, height = 6, dpi = 300
)
# Residual diagnostics for interaction model
qq_plot <- ggplot(data.frame(residuals = resid(model_interaction)), aes(sample = residuals)) +
stat_qq(color = "steelblue", alpha = 0.7) +
stat_qq_line(color = "red", linetype = "dashed") +
labs(
title = "Q-Q Plot: Residual Normality",
x = "Theoretical Quantiles",
y = "Sample Quantiles"
) +
theme_minimal()
residuals_plot <- ggplot(data.frame(
fitted = fitted(model_interaction),
residuals = resid(model_interaction)
), aes(x = fitted, y = residuals)) +
geom_point(color = "steelblue", alpha = 0.7) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_smooth(method = "loess", color = "orange", se = FALSE) +
labs(
title = "Residuals vs Fitted Values",
x = "Fitted Values",
y = "Residuals"
) +
theme_minimal()
# Save diagnostic plots
ggsave(
filename = paste0(an_fi, "/model_diagnostics_qq.png"),
plot = qq_plot,
width = 6, height = 5, dpi = 300
)
ggsave(
filename = paste0(an_fi, "/model_diagnostics_residuals.png"),
plot = residuals_plot,
width = 6, height = 5, dpi = 300
)
# Create main results panel combining key visualizations
results_panel <- (pc1_interaction_plot | pc2_interaction_plot) /
coef_comparison_plot +
plot_layout(
heights = c(2, 1),
guides = 'collect'
) +
plot_annotation(
title = 'Principal Component Analysis: Immune Signatures Predict Weight Loss',
tag_levels = 'A',
theme = theme(plot.title = element_text(size = 16, hjust = 0.5))
)
# Save panel figure
ggsave(
filename = paste0(panels_fi, "/pca_regression_results_panel.png"),
plot = results_panel,
width = 14, height = 10, dpi = 300
)
# Extract key statistics for reporting in text
extract_model_stats <- function(model) {
s <- summary(model)
list(
r_squared = round(s$r.squared, 3),
adj_r_squared = round(s$adj.r.squared, 3),
f_stat = round(s$fstatistic[1], 2),
p_value = round(pf(s$fstatistic[1], s$fstatistic[2], s$fstatistic[3], lower.tail = FALSE), 6),
n_obs = nobs(model)
)
}
# Get stats for all models
pc_only_stats <- extract_model_stats(model_pc_only)
complete_stats <- extract_model_stats(model_complete)
interaction_stats <- extract_model_stats(model_interaction)
# Fix the statistics printing section:
cat("\n===============================================================\n")
cat("KEY STATISTICS FOR RESULTS TEXT\n")
cat("===============================================================\n")
cat(sprintf("PC Only Model: R² = %.3f, F = %.2f, p = %.6f, n = %d\n",
pc_only_stats$r_squared, pc_only_stats$f_stat,
pc_only_stats$p_value, pc_only_stats$n_obs))
cat(sprintf("Complete Model: R² = %.3f, F = %.2f, p = %.6f, n = %d\n",
complete_stats$r_squared, complete_stats$f_stat,
complete_stats$p_value, complete_stats$n_obs))
cat(sprintf("Interaction Model: R² = %.3f, F = %.2f, p = %.6f, n = %d\n",
interaction_stats$r_squared, interaction_stats$f_stat,
interaction_stats$p_value, interaction_stats$n_obs))
cat("===============================================================\n")
cat("\n✅ Analysis complete! Check the following folders:\n")
cat("📊 Tables:", file.path(tables), "\n")
cat("📈 Figures:", file.path(an_fi), "\n")
cat("🎨 Panels:", file.path(panels_fi), "\n")
# Clean up intermediate objects (optional)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
# Clean up intermediate objects (optional)
# rm(qq_plot, residuals_plot, pc_only_stats, complete_stats, interaction_stats)
