plot = coefs1_3, width = 6, height = 4)
####################################
# Tidy the models
tidy_model_1 <- tidy(model_1)
tidy_model_5 <- tidy(model_5)
tidy_model_3 <- tidy(model_3)
# Combine the tidied models with model labels
all_models <- bind_rows(
tidy_model_1 %>% mutate(model = "Model 1"),
tidy_model_5 %>% mutate(model = "Model 2"),
tidy_model_3 %>% mutate(model = "Model 3")
)
# Group mouse_strain terms into a single summary row per model
mouse_strain_summary <- all_models %>%
filter(grepl("mouse_strain", term)) %>%
group_by(model) %>%
summarise(
term = "Mouse Strain (combined)",
estimate = paste0(round(estimate, 3), collapse = ", "),
std.error = paste0("(", round(std.error, 3), ")", collapse = ", "),
p.value = paste0(round(p.value, 3), collapse = ", ")
) %>%
mutate(across(c(estimate, std.error, p.value), as.character))  # Ensure consistency in data type
# Filter out the mouse_strain terms from the non-strain rows
non_mouse_strain_terms <- all_models %>%
filter(!grepl("mouse_strain", term)) %>%
mutate(across(c(estimate, std.error, p.value), as.character))  # Convert to character to match
# Combine non-mouse_strain terms with mouse_strain_summary
final_table <- bind_rows(non_mouse_strain_terms, mouse_strain_summary)
# Arrange rows by model and move Mouse Strain row down
final_table <- final_table %>%
arrange(model, desc(term != "Mouse Strain (combined)"))
# Create a final clean table
publication_table <- final_table %>%
dplyr::select(model, term, estimate, std.error, p.value) %>%  # Select relevant columns
kbl(format = "html", digits = 3, caption = "Compact Regression Table with Mouse Strain Combined") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
add_header_above(c(" " = 2, "Model 1" = 1, "Model 2" = 1, "Model 3" = 1))  # Adjusted for 5 total columns
# Save as HTML
save_kable(publication_table, file = "output/tables/compact_regression_table_combined.html")
# Convert to PNG for Google Docs
webshot("output/tables/compact_regression_table_combined.html",
file = "output/tables/compact_regression_table_combined.png")
model_6 <- lm(WL_max ~ PC1 * current_infection + PC2 *current_infection,
data = lab)
summary(model_6)
model_6 <- lm(WL_max ~ PC1 * current_infection + PC2 *current_infection,
data = lab)
model_6 <- lm(WL_max ~ PC1 * current_infection + PC2 *current_infection,
data = lab)
summary(model_6)
ggsave(filename = paste0(an_fi, "/plot_sums_mix_PCA.jpeg"),
plot = coefs6, width = 6, height = 4)
#see the ggefects
effects <- ggpredict(model_6)
pc1_current_infection <-
ggpredict(model_6, terms = c("PC1")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
#  ggtitle("Effect of PC1 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_current_infection
coef_plot_PC1PC2
?plot_coefs
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE)
coef_plot_PC1PC2
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE,
rescale.distributions = FALSE)
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE,
rescale.distributions = TRUE)
coef_plot_PC1PC2
# remove gene information
model_5 <- lm(WL_max ~  current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE,
rescale.distributions = TRUE,
colos = "blue")
coef_plot_PC1PC2
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE,
rescale.distributions = TRUE,
colors = "blue")
coef_plot_PC1PC2
## make a coefficient plot with just the PC1 and PC2
coef_plot_PC1PC2 <- plot_coefs(model_3, plot.distributions = TRUE,
rescale.distributions = TRUE,
colors = "blue",
alpha = 0.6)
coef_plot_PC1PC2
ggsave(filename = paste0(an_fi, "/plot_sums_pc1_pc2_simple.pdf"),
plot = coef_plot_PC1PC2, width = 6, height = 4, dpi = 300)
coef_plot_PC1PC2
# only pc1 + pc2
model_3 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_3)
model_6 <- lm(WL_max ~ PC1 * current_infection + PC2 *current_infection,
data = lab)
summary(model_6)
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ current_infection", sep = " "))
lm(lm_formula, data = lab)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
# Filter out intercept terms
tidy_models_no_intercept <- tidy_models[!grepl("intercept", tidy_models$term, ignore.case = TRUE),]
tidy_models_no_intercept <- as.data.frame(tidy_models_no_intercept) %>%
mutate(term = case_when(
term == "current_infectionE. falciformis" ~ "E. falciformis",
term == "current_infectionE. ferrisi" ~ "E. ferrisi",
))
# Determine the common y-axis range
common_y_limits <- range(-7,7)
coef_mmr <- ggplot(tidy_models_no_intercept, aes(x = model, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(width = 0.5)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
scale_color_manual(values = c("E. falciformis" = "#FF0000", "E. ferrisi" = "#7A0092")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
labs(x = "Gene", y = "Coefficients estimate (Difference to uninfected)") +
scale_y_continuous(limits = common_y_limits) +  # Apply shared y-axis limits
theme(legend.title = element_blank(),
legend.position = "none")
print(coef_mmr)
ggsave(filename = paste0(an_fi, "/coef_plot_lab_genes.pdf"),
plot = coef_mmr, width = 6, height = 4, dpi = 300)
####################################################
####################################################
############################# gene expression distribution
lab %>%
pivot_longer(cols = all_of(dependent_vars),
names_to = "Genes", values_to = "Expression") %>%
ggplot(aes(x = Expression, fill = current_infection)) +
ggdist::stat_halfeye(
adjust = .5,
width = .6,
alpha = 0.5,
.width = 0,
justification = -.2,
point_colour = NA,
orientation = "y"  # Set orientation to y
) +
geom_boxplot(position = "dodge2",
width = .5,
outlier.shape = NA,
orientation = "y"  # Set orientation to y
) +
facet_wrap(~Genes,  scales = 'free', ncol = 4) +
labs(x = "Expression Level", y = "Density") +
theme_minimal() +
scale_fill_manual(values = color_mapping, labels = labels)  +
theme(legend.title = element_blank(),
legend.position = c(0.85, 0.06),
legend.text = element_markdown())+
labs(y = "Density",
x = "Gene expression level") -> density_imm
density_imm
ggsave(filename = paste0(an_fi, "/density_immune_genes.jpeg"),
plot = density_imm, width = 10, height = 8, dpi = 300)
tidy_models_no_intercept
# WOrking with fieldoratory data only
# Select genes
field  <- hm %>%
dplyr::filter(origin == "Field")
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ species_Eimeria", sep = " "))
lm(lm_formula, data = field)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
# Filter out intercept terms
tidy_models_no_intercept <- tidy_models[!grepl("intercept", tidy_models$term, ignore.case = TRUE),]
tidy_models_no_intercept <- as.data.frame(tidy_models_no_intercept) %>%
mutate(term = case_when(
term == "species_EimeriaE. falciformis" ~ "E. falciformis",
term == "species_EimeriaE. ferrisi" ~ "E. ferrisi",
))
tidy_models_no_intercept
lab <- hm %>%
filter(origin == "Lab")
lab <- hm %>%
filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
ungroup() %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
ungroup() %>%
dplyr::select(c(all_of(Genes_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 26)
# ntree = number of trees
# save the model
saveRDS(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.RDS"))
print(WL_predict_gene)
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 26)
predict_WL_cv$fit.var.exp
predict_WL_cv$fit.mse
par(mar=c(1,1,1,1))
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
model_var <- plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
abs_error <- plot(predict_WL_cv, stat = "mae")
#d# ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
WL_predict_gene$mtry
oob_error_rate <- WL_predict_gene$mse[WL_predict_gene$ntree]
oob_error_rate <- 1 - sum(diag(WL_predict_gene$confusion)) / sum(WL_predict_gene$confusion)
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
ImpData <- as.data.frame(randomForest::importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
varImp(WL_predict_gene)
var_imp <- as.data.frame(varImp(WL_predict_gene))
var_imp$Genes <- row.names(var_imp)
var_imp <- var_imp %>%
rename(Importance = Overall)
# Assuming var_imp is your data frame with variables 'Importance' and 'Genes'
var_imp <- var_imp %>%
mutate(Genes = factor(Genes, levels = Genes[order(-Importance)])) # Reorder Genes by decreasing Importance
# Create the plot with a color scale
importance_plot <-
ggplot(var_imp, aes(x = reorder(Genes, Importance), y = Importance, fill = Importance)) +
geom_col() + # Use geom_col for a bar plot; it's more appropriate for importance scores
coord_flip() + # Flip the coordinates to make it easier to read
labs(x = "Genes", y = "IncNodePurity") +#, title = "Variable Importance of Genes") +
theme_minimal() + # A clean, minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), # Adjust text angle for x-axis labels if needed
legend.title = element_blank()) + # Remove the legend title if desired
scale_fill_viridis_c(option = "magma", direction = -1) + # Apply a Viridis color scale with the 'magma' option
theme(legend.position = c(0.8, 0.4))
importance_plot
var_imp
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(randomForest::importance(WL_predict_gene))
#The predict() function in R is used to predict the values based on the
# input data.
predictions <- predict(WL_predict_gene, test.data)
# assign test.data to a new object, so that we can make changes
result <- test.data
#add the new variable of predictions to the result object
result <- cbind(result, predictions)
cor.test(result$WL_max, result$predictions)
test_lab <- lab %>%
left_join(result, by = c("WL_max", "IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
test_lab <- test_lab %>%
drop_na(predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor(result$WL_max, result$predictions,
method = "pearson")
model <- lm(predictions ~ WL_max, data = test_lab)
summary(model)
model <- lm(predictions ~ WL_max, data = test_lab)
summary(model)
ggpredict(model, terms = c("WL_max")) %>%
plot(colors = "blue") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))-> lm_short
lm_short
ggsave(filename = paste0(an_fi, "/correlation_pred_obs_random.pdf"),
width = 6, height = 5, dpi = 300)
model <- lm(predictions ~ WL_max * current_infection, data = test_lab)
summary(model)
#### Plotting
ggpredict(model, terms = c("WL_max", "current_infection")) %>%
plot(colors = "darkorchid") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
scale_color_manual(values = color_mapping, labels = labels) +
scale_fill_manual(values = color_mapping, labels = labels) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.text = element_markdown()) -> lm_weight_loss_predictions
lm_weight_loss_predictions
ggsave(filename = paste0(an_fi, "/obs_pred_treatment_groups_random.pdf"),
width = 6, height = 5, dpi = 300)
############################
##############uusing only the current infection to predict predicted weight
# loss
model_c <- lm(predictions ~ current_infection, data = test_lab)
summary(model_c)
preds <- ggpredict(model_c, terms = "current_infection")
#### Plotting
ggplot(preds, aes(x = x, y = predicted, color = x)) +
geom_point(#aes(shape = x),
size = 3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1, size = 0.7) +
geom_line(aes(group = group, color = "black")) +
scale_color_manual(values = color_mapping, labels = labels) +
labs(
# title = "Bar plot showing the predicted maximum weight
#loss for each infection group",
x = "Experimental infection groups",
y = "Predicted maximum weight loss",
color = "current_infection",
shape = "current_infection"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13),
axis.text.x = element_markdown(),
legend.text = element_markdown()
) -> lm_weight_loss_predictions_c
lm_weight_loss_predictions_c
ggsave(filename = paste0(an_fi, "/random_foreest_lab_predictions_eimeria.pdf"),
width = 6, height = 5, dpi = 300)
#######################################
#####################################
########################################
model <- lm(predictions ~ WL_max * delta_ct_cewe_MminusE , data = test_lab %>%
filter(MC.Eimeria == "TRUE"))
summary(model)
#######################################
#####################################
########################################
model <- lm(predictions ~ WL_max * delta_ct_cewe_MminusE , data = test_lab %>%
filter(MC.Eimeria == "TRUE"))
summary(model)
#######################################
#####################################
########################################
model_d <- lm(predictions ~  delta_ct_cewe_MminusE , data = test_lab %>%
filter(MC.Eimeria == "TRUE"))
summary(model_d)
ggpredict(model_d, terms = c("delta_ct_cewe_MminusE"), interactive=TRUE) %>%
plot(color = "purple") +
labs(title = NULL) +  # This removes the title
# ggtitle("Relationship between infection intensity
#         and predicted maximum weight loss") +
xlab("Infection intensity with Eimeria delta Ct") +
ylab("Predicted maximum weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))-> lm_short
lm_short
preds <- ggpredict(model_d, terms = "delta_ct_cewe_MminusE")
ggsave(filename = paste0(an_fi, "/deltact_random.pdf"),
width = 6, height = 5, dpi = 300)
#### Plotting
ggplot(preds, aes(x = x, y = predicted, color = x)) +
# geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1, size = 0.7) +
geom_abline() +
# scale_color_manual(values = color_mapping, labels = labels) +
labs(
x = "Infection group",
y = "Predicted Weight Loss",
color = "current_infection",
shape = "current_infection"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13),
axis.text.x = element_markdown(),
legend.text = element_markdown()
)
ggsave(filename = paste0(an_fi, "/deltact_random.pdf"),
width = 6, height = 5, dpi = 300)
summary(model_d)
### plotting
test_lab %>%
ggplot(aes(x = predictions, y = WL_max, color = current_infection)) +
geom_point(aes(size = 5),#delta_ct_cewe_MminusE),
alpha = 0.7) +
labs(
x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss",
#  title = "Relationship between Predicted and Observed Weight Loss",
#subtitle = "Grouped by Current Infection and Sized by Delta CT Value",
color = "Parasite strain",
# size = "Caecal infection intensities, Delta Ct value",
#shape = "Delta Ct treshold"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
scale_color_manual(values = color_mapping, labels = labels) +
scale_size_continuous(range = c(2, 10)) +
guides(size = "none") +
theme(legend.position = c(0.8, 0.2),
legend.text = element_markdown())-> predictions_random_for_lab
predictions_random_for_lab
ggsave(plot = predictions_random_for_lab,
filename = paste0(an_fi, "/predictions_random_for_lab.pdf"),
width = 6, height = 5,
dpi = 1000)
combi_plot <- (importance_plot | predictions_random_for_lab) /
(lm_weight_loss_predictions_c | lm_short) +
#plot_layout(guides = 'collect') + # Collect all legends into a
#single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
combi_plot
