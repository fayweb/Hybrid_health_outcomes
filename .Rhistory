# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
######### Decision: Removing IL.10 from gene selection due data largely missing
# remove il_10
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# ***********************************************************
# Part 5: Experimental design                           ----
# ***********************************************************
#----------------------------------------------------------*
# Show the primary results of our experimental design
# How many rodents, distributions, strains, and parasite information
if (0) source(file.path(cdesign, "design_experimental.R"))
# ***********************************************************
# Part 6: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
# 6.1: PCA
# performing a pca analysis on the laboratory immune gene data
# Requires: hm
# Creates: lab
# Plots: biplot, pca_variables,
#  contr_PC1, contr_PC2
# Part 6: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
# 6.1: PCA
# performing a pca analysis on the laboratory immune gene data
# Requires: hm
# Creates: lab
# Plots: biplot, pca_variables,
#  contr_PC1, contr_PC2
#----------------------------------------------------------*
if (1) source(file.path(canalysis, "analysis_PCA_genes_lab.R"))
source("~/GitHub/Hybrid_health_outcomes/code/analysis/analysis_PCA_genes_lab.R")
dev.off()
lab <- hm %>%
filter(origin == "Lab")
# select the laboratory genes
genes <- lab[ ,colnames(lab) %in% Genes_v]
# PCA
##pca on the complete data set
res.pca <- PCA(genes)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70), barfill = "seagreen2")
dev.off()
jpeg(paste0(an_fi, "/contributions_dimensions.jpeg"),
width = 10, height = 5, units = "in", res = 300)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
dev.off()
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
# Convert mouse_id to a data frame
mouse <- data.frame(Mouse_ID = lab[,1])
mouse_id <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$PC1 <- res.pca$ind$coord[, 1]
mouse$PC2 <- res.pca$ind$coord[, 2]  # indexing the second column
mouse$PC3 <-  res.pca$ind$coord[, 3]
mouse$PC4 <-  res.pca$ind$coord[, 4]
mouse$PC5 <-  res.pca$ind$coord[, 5]
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
pca.vars.m <- melt(pca.vars, id.vars = "vars")
source(paste0(c, "/functions.R"))
circ <- circleFun(c(0,0),2,npoints = 500)
#Itâ€™s possible to use the function corrplot() [corrplot package] to highlight
#the most contributing variables for each dimension:
var.contrib <- as.data.frame(res.pca$var$contrib)
var.contrib.matrix <- data.matrix(var.contrib)
corrplot(var.contrib.matrix, is.corr=FALSE)
pca_var <- as.data.frame(pca.vars)
# Contributions of variables to PC1
jpeg(paste0(an_fi, "/contributions_pc1.jpeg"),
width = 6, height = 4, units = "in", res = 300)
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2")
dev.off()
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
## Contributions of variables to PC2
jpeg(paste0(an_fi, "/contributions_pc2.jpeg"),
width = 6, height = 4, units = "in", res = 300)
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2")
dev.off()
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 18)
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
#select same rows in the first table
lab <- lab[row.names(genes), ]
##############################
#########
###########################
vpg <- pca.vars
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
lab$cos2 <- lab$PC1^2 + lab$PC2^2
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
ggsave(filename = paste0(an_fi, "/pca_individuals.jpeg"),
plot = pca_individuals,
width = 6, height = 4, dpi = 300)
###########################
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 2, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%") +
#ggtitle("PCA Plot of Variables") +
theme_minimal()  +
scale_color_gradient(low = "blue", high = "orange")+
labs(color = "Squared distance to origin")
ggsave(filename = paste0(an_fi, "/pca_variables.jpeg"),
plot = pca_variables,
width = 5, height = 6, dpi = 300)
##################
############### residual plot
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue"),
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "") -> biplot
ggsave(filename = paste0(an_fi, "/biplot.jpeg"), plot = biplot,
width = 12, height = 6, dpi = 600)
###PC1 PC2 linear regression
lab$current_infection <- factor(lab$current_infection,
levels = c("uninfected", "E_falciformis", "E_ferrisi"))
lab$mouse_strain <- as.factor(lab$mouse_strain)
lab$immunization <- factor(lab$immunization, levels =
c("naive", "uninfected",
"heterologous", "homologous"))
model_1 <- lm(WL_max ~ PC1 + PC2 +
current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
tab_model(model_1)
stargazer(model_1,
type = "text", out = paste0(tables,
"/predictors_weightloss.doc"),
title = "Linear models - Predicting maximum weight loss")
# Extract the residuals from the model
residuals <- resid(model_1)
# Create a data frame with the residuals
residuals_df <- data.frame(residuals = residuals)
# Create the QQ plot
residuals_1 <-
ggplot(residuals_df, aes(sample = residuals)) +
stat_qq(color = "blue") +
ggtitle("QQ Plot of Residuals") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
theme_minimal()
residuals_1
ggsave(filename = paste0(an_fi, "/residuals_model_1.jpeg"),
plot = residuals_1,
width = 12, height = 6, dpi = 600)
# Extract the fitted values from the model
fitted_values <- fitted(model_1)
# Create a data frame with the residuals and the fitted valueshttp://127.0.0.1:11745/graphics/plot_zoom_png?width=674&height=334
data_df <- data.frame(residuals = residuals, fitted_values = fitted_values)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = paste0(an_fi, "/residuals_vs_fitted.jpeg"),
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
# without host data
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE, data = lab)
summary(model_2)
# only pc1 + pc2
model_3 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_3)
model_4 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_4)
plot_coefs(model_1, model_2, model_3, model_4)
# remove gene information
model_5 <- lm(WL_max ~  current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_5,
type = "text",
out = paste0(tables, "/stargazer.docx"),
title = "Linear models - Predicting maximum weight loss",
align = TRUE)
export_summs(model_1, model_2, model_3,model_5,
scale = TRUE, to.file = "docx",
file.name = paste0(tables, "/lab_model1_3.docx"))
models <- list(
"Model 1" = model_1,
"Model 2" = model_2,
"Model 3" = model_3,
"Model 4" = model_5)
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log",
output = paste0(tables, "/lab_model1_3.docx"))
modelsummary(models = as.list(model_1, model_2, model_3),
output = paste0(tables, "/lab_model1.docx"))
model_6 <- lm(WL_max ~ PC1 * current_infection + PC2 *current_infection,
data = lab)
summary(model_6)
plot_summs(model_6) -> coefs6
coefs6
ggsave(filename = paste0(an_fi, "/plot_sums_mix_PCA.jpeg"),
plot = coefs6, width = 6, height = 4)
#see the ggefects
effects <- ggpredict(model_6)
pc1_current_infection <-
ggpredict(model_6, terms = c("PC1")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
#  ggtitle("Effect of PC1 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_current_infection
ggsave(filename = paste0(an_fi, "/pc1_current_infection.jpeg"),
plot = pc1_current_infection,
width = 6, height = 4, dpi = 1000)
pc2_current_infection <-
ggpredict(model_6, terms = c("PC2")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc2_current_infection
ggsave(filename = paste0(an_fi, "/pc2_current_infection.jpeg"),
plot = pc2_current_infection,
width = 6, height = 4, dpi = 1000)
plot_summs(model_6)
modelsummary(model_6, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log",
output = paste0(tables, "/mixed_effects_pca.docx"))
# Now create the scatter plot using this color mapping
ggpredict(model_6, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc1_WL_current_infection
pc1_WL_current_infection
ggsave(paste0(an_fi, "/pc1_WL_current_infection.jpeg"), pc1_WL_current_infection,
width = 8, height = 6, dpi = 1000)
# Now create the scatter plot using this color mapping
# Now create the scatter plot using this color mapping
ggpredict(model_6, terms = c("PC2", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc2_WL_current_infection
pc2_WL_current_infection
ggsave(paste0(tables, "/pc2_WL_current_infection.jpeg"),
pc2_WL_current_infection, width = 8, height = 6, dpi = 1000)
####################
################### Create the panel figure
figure_panel <- ggarrange(pca_variables, biplot,
pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 2, nrow = 3)
# Adding the title "Figure 1" to the entire arrangement
figure_panel <- annotate_figure(figure_panel,
top = text_grob("Fig. 2", size = 14,
face = "bold"))
ggsave(paste0(panels_fi, "/panel_regression_pca.jpeg"),
figure_panel, width = 12, height = 10, dpi = 300)
plot_summs(model_6)
plot_summs(model_6) -> coef_interaction
################### Create the simplified figure
figure_panel <- ggarrange(pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
coef_interaction,
labels = c("A", "B", "C", "D", "E"),
ncol = 2, nrow = 3)
# Adding the title "Figure 1" to the entire arrangement
figure_panel <- annotate_figure(figure_panel,
top = text_grob("Fig. 5", size = 14,
face = "bold"))
ggsave(paste0(panels_fi, "/panel_regression_pca_interaction.jpeg"),
figure_panel, width = 12, height = 10, dpi = 300)
comb <- (pc1_current_infection | pc2_current_infection /
pc1_WL_current_infection | pc2_WL_current_infection /
coef_interaction) +
#  plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
comb <- comb +
plot_annotation(title = 'Fig. 5',
theme = theme(plot.title = element_text(size = 20, hjust = 0)))
comb <- comb +
plot_layout(heights = c(1, 1),
widths = c(2, 1))
comb
comb <- (pc1_current_infection | pc2_current_infection /
pc1_WL_current_infection | pc2_WL_current_infection /
coef_interaction) +
#  plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
comb <- comb +
plot_annotation(title = 'Fig. 5',
theme = theme(plot.title = element_text(size = 20, hjust = 0)))
comb
comb <- comb +
plot_layout(heights = c(1, 1,1,1,2),
widths = c(1,1,1,1,1))
comb
figure_panel <- ggarrange(pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
coef_interaction,
labels = c("A", "B", "C", "D", "E"),
ncol = 2, nrow = 3)
# Adding the title "Figure 1" to the entire arrangement
figure_panel <- annotate_figure(figure_panel,
top = text_grob("Fig. 5", size = 14,
face = "bold"))
figure_panel
figure_panel <- ggarrange(pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
coef_interaction,
labels = c("A", "B", "C", "D", "E"),
ncol = 2, nrow = 3,legend.grob = TRUE)
figure_panel <- ggarrange(pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
coef_interaction,
labels = c("A", "B", "C", "D", "E"),
ncol = 2, nrow = 3)
# Adding the title "Figure 1" to the entire arrangement
figure_panel <- annotate_figure(figure_panel,
top = text_grob("Fig. 5", size = 14,
face = "bold"))
ggsave(paste0(panels_fi, "/panel_regression_pca_interaction.jpeg"),
figure_panel, width = 12, height = 10, dpi = 300)
View(coefs6)
################### Create the simplified figure# combine
panel_figure5 <-
(pc1_current_infection | pc2_current_infection ) /
(pc1_WL_current_infection | pc2_WL_current_infection) /
free(coef_interaction) +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
panel_figure5 <- panel_figure2 +
plot_annotation(title = 'Fig. 5',
theme = theme(plot.title = element_text(size = 20, hjust = 0))) +
plot_layout(heights = c(1, 1,1),
widths = c(1,1,1))
# Add a figure title
panel_figure5 <- panel_figure5 +
plot_annotation(title = 'Fig. 5',
theme = theme(plot.title = element_text(size = 20, hjust = 0))) +
plot_layout(heights = c(1, 1,1),
widths = c(1,1,1))
panel_figure5
################### Create the simplified figure# combine
panel_figure5 <-
(pc1_current_infection | pc2_current_infection ) /
(pc1_WL_current_infection | pc2_WL_current_infection) /
free(coef_interaction) +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
panel_figure5 <- panel_figure5 +
plot_annotation(title = 'Fig. 5',
theme = theme(plot.title = element_text(size = 20, hjust = 0))) +
plot_layout(heights = c(1, 1,1),
widths = c(1,1,1))
# Save the panel figure
ggsave(paste0(panels_fi, "/panel_regression_pca_interaction.jpeg"),
panel_figure2, width = 13, height = 12, dpi = 300)
# Save the panel figure
ggsave(paste0(panels_fi, "/panel_regression_pca_interaction.jpeg"),
panel_figure5, width = 13, height = 12, dpi = 300)
rm(residuals_1, residuals_df, residuals_vs_fitted, model_1, model_2,
model_3, model_4, model_5, models, effects, data_df)
rm(circ, mouse, pca.vars, pca.vars.m,
pca_var, var.contrib.matrix, res.pca,
var.contrib, pca_variables)
