plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
combi_plot
# Add a figure title
combi_plot <- combi_plot +
plot_annotation(title = 'Fig. 6',
theme = theme(plot.title = element_text(size = 13, hjust = 0)))
# Display the panel figure
print(combi_plot)
ggsave(plot = combi_plot,
filename = paste0(panels_fi, "/variableimp_rand_results_lab.jpeg"), width = 14,
height = 5, dpi = 1000)
# Calculate the linear model
lm_fit <- lm(WL_max ~ predictions, data = test_lab)
# Extract coefficients for the model formula
intercept <- round(coef(lm_fit)[1], 2)
slope <- round(coef(lm_fit)[2], 2)
formula_text <- paste0("WL_max = ", intercept, " ", ifelse(slope >= 0, "+ ", "- "), abs(slope), " * predictions")
# Calculate correlation
cor_value <- round(cor(test_lab$WL_max, test_lab$predictions), 2)
cor_text <- paste0("Rho = ", cor_value)
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
ggsave(filename = paste0(an_fi, "/linear_model_of_random_forest.jpeg"), plot = linear_plot,
width = 10, height = 6,
dpi = 1000)
figure_panel_2 <- ggarrange(predictions_random_for_lab,
ggarrange(importance_plot, lm_short,
labels = c("B", "C"), ncol = 2),
nrow = 2, labels = "A")
# Adding the title "Figure 1" to the entire arrangement
figure_panel_2 <- annotate_figure(figure_panel_2,
top = text_grob("Figure 2", size = 14,
face = "bold"))
print(figure_panel_2)
ggsave(paste0(panels_fi, "/panel_random_forest_lab_alternative.jpeg"), figure_panel_2,
width = 18, height = 18, dpi = 300)
# Select laboratory data
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Field <- hm %>%
dplyr::filter(origin == "Field")
Field <- hm %>%
dplyr::filter(origin == "Field")
# check the distributions of weight loss for each mouse strain
# Define colors
colors <- c("TRUE" = "firebrick3", "FALSE" = "steelblue")
# transform mouse strain into factor
lab$mouse_strain <- as.factor(lab$mouse_strain)
lab$mouse_strain <- gsub(pattern = "_", " ", lab$mouse_strain)
# order factor levels
lab$mouse_strain <- factor(lab$mouse_strain,
levels = names(
sort(tapply(lab$WL_max, lab$mouse_strain, median))))
lab %>%
dplyr::group_by(mouse_strain) %>%
# Summarize the data to get counts for each mouse strain
dplyr::summarize(count = n()) %>%
# Reorder mouse_strain by count
mutate(mouse_strain = reorder(mouse_strain, count)) %>%
# Plotting
ggplot(aes(x = mouse_strain, y = count, fill = mouse_strain)) +
geom_bar(stat = "identity") +
# Specify stat = "identity" for pre-summarized data
geom_text(aes(label = count), vjust = -0.3) +
# Add count labels on top of bars
scale_fill_viridis_d() +
# Use a nice color scale, like Viridis
theme_minimal() + # Apply a minimal theme for a cleaner look
theme(axis.text.x = element_text(angle = 50)) +
labs(#title = "Mouse strains in experimental infections",
x = "Mouse Strain",
y = "Number of mice") +# Add label
guides(fill = "none") -> m_s
m_s
ggsave(filename = paste0(d_fi, "/mouse_strains.jpeg"),
plot = m_s, width = 6, height = 4)
# Creating a density plot for the Hybrid Index (HI)
ggplot(Field, aes(HI)) +
geom_density(fill = "steelblue",alpha = 0.7) +
geom_vline(aes(xintercept = mean(HI, na.rm = TRUE)),
color = "red", linetype = "dashed", size = 1) +
labs(#title = "Distribution of Hybrid Index (HI) Among Wild Mice",
x = "Hybrid Index (HI)",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) -> h_w
h_w
ggsave(filename =  paste0(d_fi,"/densityplot_HI.jpeg"),
plot = h_w, width = 8, height = 6)
# Base world map
world_map <- map_data("world")
lon_range <- range(Field$Longitude) + c(-0.1, 0.1)  # Expanding the range a bit for padding
lat_range <- range(Field$Latitude) + c(-0.1, 0.1)   # Expanding the range a bit for padding
library(psych)
install.packages("psych")
library(psych)
describe(Field$HI)
lab <- hm %>%
filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
ungroup() %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
ungroup() %>%
dplyr::select(c(all_of(Genes_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
source("~/GitHub/Hybrid_health_outcomes/code/master_hm.R")
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI) # remove any nas in the hybrid index
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS(readRDS(paste0(cmodels, "/predict_WL.rds"))
set.seed(540)
# load predicting weight loss model
weight_loss_predict <- readRDS(paste0(cmodels, "/predict_WL.rds"))
# load predicting weight loss model
weight_loss_predict <- readRDS(paste0(cmodels, "predict_WL.rds"))
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.rds"))
# ***********************************************************
# Part 7: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
#7.2: application of random forest trained on laboratory data
# set, on field samples
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI) # remove any nas in the hybrid index
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS(paste0(cmodels, "WL_predict_gene.rds"))
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI) # remove any nas in the hybrid index
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# ***********************************************************
# Part 7: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
#7: Random forest
# Training and testing a random forest that predicts weight los
# on experimental infections with Eimeria spp.
# Requires: hm
# Creates random forest model: WL_predict_gene.RData
#----------------------------------------------------------*
lab <- hm %>%
filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
ungroup() %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
ungroup() %>%
dplyr::select(c(all_of(Genes_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 501)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.rds"))
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI) # remove any nas in the hybrid index
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS(paste0(cmodels, "WL_predict_gene.rds"))
paste0(cmodels, "WL_predict_gene.rds")
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.rds"))
print(WL_predict_gene)
# load predicting weight loss model
weight_loss_predict <- readRDS(paste0(cmodels, "WL_predict_gene.rds"))
# load predicting weight loss model
weight_loss_predict <- readRDS("code/models/WL_predict_gene.rds"))
# load predicting weight loss model
weight_loss_predict <- readRDS("code/models/WL_predict_gene.rds")
# ***********************************************************
# Title: Predicting the health outcomes of infections in hybrid mice
# Purpose: This script defines all the settings and executes
#         all the code (.R, .md) to reproduce the analysis
#         of the project
#
# Authors: Fay Webster
# ID variables:
# ***********************************************************
# Part 1: Set standard settings & install packages            ----
# ***********************************************************
# Install packages/load libraries to keep R environment stable
# install
# pacman for simplified bulk pkg import
# renv for pkg consistency over time
#install.packages("pacman")
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
library(pacman)
## Standard settings ----
# seed
set.seed(13102023)
# Use p_load to install (if not already) and load the packages
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork,FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools,modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities)
## Define within project file paths ----
# code
c <- "code"
clab      <- paste0(c, "/lab/")
cfield     <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # experimental project design
nmi   <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# data
# building dynamic paths
# Get the user's profile directory on Windows
user_profile <- Sys.getenv("USERPROFILE")
# Append the specific path
one_drive <- file.path(user_profile, "OneDrive",
"Documents", "GitHub", "Hybrid_health_outcomes")
# relative_path is the desired path
d <- paste0(one_drive, "/data")
# labs
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# field
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# output
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables  <- paste0(output, "/tables")
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
## Define functions ----
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data cleaning - lab                        ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw data & save as intermediate/processed
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_import.R"))
#----------------------------------------------------------*
# 2.2: Conduct cleaning (formatting)
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))
#----------------------------------------------------------*
# 2.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))
# Creates: Correlation matrix between laboratory gene expression values
# ***********************************************************
# Part 3: Run field infection data cleaning                      ----
# **********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate/processed
# Requires:
# Creates: field_cleaned_data.csv
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct cleaning (formatting) w/o changing data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Import amplicon infection intensities and join with field
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
######### Decision: Removing IL.10 from gene selection due data largely missing
# remove il_10
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# ***********************************************************
# Part 5: Experimental design                           ----
# ***********************************************************
#----------------------------------------------------------*
# Show the primary results of our experimental design
# How many rodents, distributions, strains, and parasite information
if (0) source(file.path(cdesign, "design_experimental.R"))
# ***********************************************************
# Part 6: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
# 6.1: PCA
# performing a pca analysis on the laboratory immune gene data
# Requires: hm
# Creates: lab
# Plots: biplot, pca_variables,
#  contr_PC1, contr_PC2
#----------------------------------------------------------*
if (0) source(file.path(canalysis, "analysis_PCA_genes_lab.R"))
# 6.2: PCA
# Regressions with pc axes
# Plots: pc1_current_infection, pc2_current_infection, coefs5
#----------------------------------------------------------*
if (0) source(file.path(canalysis, "analysis_linear_regressions_PCA.R"))
#----------------------------------------------------------*
# 6.2: Heatmap lab genes
# Requires: hm, lab
#----------------------------------------------------------*
if (0) source(file.path(canalysis, "heatmap_lab_genes.R"))
#----------------------------------------------------------*
# 6.3: Multiple multivariate regression of genes vs weight loss in the lab
# Requires: hm, lab
#----------------------------------------------------------*
if (0) source(file.path(canalysis, "analysis_multiple_multivariate_regression.R"))
# ***********************************************************
# Part 7: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
#7.1: Random forest
# Training and testing a random forest that predicts weight loss
# on experimental infections with Eimeria spp.
# Requires: hm
# Creates random forest model: WL_predict_gene.RData
#----------------------------------------------------------*
if (0) source(file.path(canalysis, "analysis_random_forest_training.R"))
# ***********************************************************
# Part 7: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
#7.1: Random forest
# Training and testing a random forest that predicts weight loss
# on experimental infections with Eimeria spp.
# Requires: hm
# Creates random forest model: WL_predict_gene.RData
#----------------------------------------------------------*
if (1) source(file.path(canalysis, "analysis_random_forest_training.R"))
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI) # remove any nas in the hybrid index
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS("code/models/WL_predict_gene.rds")
# load predicting weight loss model
weight_loss_predict <- readRDS("~/GitHub/Article_predicting_WL/R/Models/predict_WL.rds")
lab <- hm %>%
filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
ungroup() %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
ungroup() %>%
dplyr::select(c(all_of(Genes_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 501)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.rds"))
print(WL_predict_gene)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.RDS"))
print(WL_predict_gene)
# ntree = number of trees
# save the model
saveRDS(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene.RDS"))
print(WL_predict_gene)
# load predicting weight loss model
weight_loss_predict <- readRDS("R/Models/predict_WL.rds")
# load predicting weight loss model
weight_loss_predict <- readRDS("code/models/WL_predict_gene.rds")
set.seed(540)
#The predict() function in R is used to predict the values
#based on the input data.
predicted_WL <- predict(weight_loss_predict, genes)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predicted_WL)
# add it to the field data
Field <- cbind(Field, predicted_WL)
source("~/GitHub/Hybrid_health_outcomes/code/analysis/analysis_random_forest_training.R")
