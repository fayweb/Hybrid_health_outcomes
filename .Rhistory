subtitle = "Complete breakdown of all wild-derived strains and hybrids"
) %>%
cols_label(
mouse_strain = "Strain Cross",
hybrid_status = "Genetic Background",
"E. ferrisi" = html("<em>E. ferrisi</em>"),
"E. falciformis" = html("<em>E. falciformis</em>")
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
) %>%
# Enable HTML rendering for the hybrid_status column
fmt_markdown(columns = hybrid_status)
print(supp_table)
save_table_all_formats(supp_table, "Supplementary_table_detailed_crossings")
# Install and load relaimpo if not already done
if (!require(relaimpo)) {
install.packages("relaimpo")
library(relaimpo)
}
# Create relative importance analysis for your main weight loss model
# Assuming you have a model like this (adjust based on your actual model):
weight_loss_model <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
delta_ct_cewe_MminusE, data = lab_clean)
# Calculate relative importance
rel_imp <- calc.relimp(weight_loss_model, type = c("lmg", "first", "last"))
# Create a nice table of relative importance
rel_imp_table <- data.frame(
Predictor = names(rel_imp$lmg),
LMG = round(rel_imp$lmg * 100, 2),
First = round(rel_imp$first * 100, 2),
Last = round(rel_imp$last * 100, 2)
) %>%
arrange(desc(LMG)) %>%
gt() %>%
tab_header(
title = "Table S1. Relative Importance of Predictors",
subtitle = "Contribution to variance explained in weight loss model (%)"
) %>%
cols_label(
Predictor = "Predictor",
LMG = "LMG (%)",
First = "First (%)",
Last = "Last (%)"
) %>%
tab_footnote(
footnote = "LMG: R² contribution averaged over all possible orderings. First: R² when entered first. Last: R² when entered last.",
locations = cells_column_labels(columns = LMG)
)
print(rel_imp_table)
save_table_all_formats(rel_imp_table, "TableS1_relative_importance")
# Analysis of subspecies differences in infection response
subspecies_analysis <- lab_clean %>%
# Create subspecies categories
mutate(
subspecies = case_when(
str_detect(mouse_strain, "SCHUNT|STRA") ~ "M. m. domesticus",
str_detect(mouse_strain, "PWD|BUSNA") ~ "M. m. musculus",
mouse_strain == "NMRI" ~ "Laboratory",
TRUE ~ "F1 hybrid"
)
) %>%
group_by(subspecies, current_infection) %>%
summarise(
n = n(),
mean_WL = mean(WL_max, na.rm = TRUE),
se_WL = sd(WL_max, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
# Create subspecies breakdown table
subspecies_table <- subspecies_analysis %>%
gt() %>%
tab_header(
title = "Table S2. Weight loss by subspecies and infection status",
subtitle = "Mean weight loss (%) ± standard error"
) %>%
cols_label(
subspecies = "Subspecies",
current_infection = "Infection Status",
n = "n",
mean_WL = "Mean Weight Loss (%)",
se_WL = "Standard Error"
) %>%
fmt_number(
columns = c(mean_WL, se_WL),
decimals = 2
) %>%
# Make species names italic
text_transform(
locations = cells_body(columns = current_infection),
fn = function(x) {
case_when(
str_detect(x, "E\\.") ~ paste0("<em>", x, "</em>"),
TRUE ~ x
)
}
) %>%
fmt_markdown(columns = current_infection)
print(subspecies_table)
save_table_all_formats(subspecies_table, "TableS2_subspecies_infection")
# Statistical test for subspecies differences
subspecies_model <- lm(WL_max ~ subspecies * current_infection,
data = lab_clean %>%
mutate(subspecies = case_when(
str_detect(mouse_strain, "SCHUNT|STRA") ~ "M. m. domesticus",
str_detect(mouse_strain, "PWD|BUSNA") ~ "M. m. musculus",
mouse_strain == "NMRI" ~ "Laboratory",
TRUE ~ "F1 hybrid"
)))
summary(subspecies_model)
# Improved Table 3 based on your code
infection_breakdown <- lab_clean %>%
count(infection_history, immunization, current_infection) %>%
arrange(infection_history)
table3_enhanced <- infection_breakdown %>%
mutate(
primary_infection = str_extract(infection_history, "^[^_]+"),
challenge_infection = str_extract(infection_history, "[^_]+$"),
primary_infection = case_when(
primary_infection == "ferrisi" ~ "E. ferrisi",
primary_infection == "falciformis" ~ "E. falciformis",
primary_infection == "uninfected" ~ "Uninfected",
TRUE ~ primary_infection
),
challenge_infection = case_when(
challenge_infection == "ferrisi" ~ "E. ferrisi",
challenge_infection == "falciformis" ~ "E. falciformis",
challenge_infection == "uninfected" ~ "Uninfected",
TRUE ~ challenge_infection
)
) %>%
select(primary_infection, challenge_infection, immunization, current_infection, n) %>%
gt() %>%
tab_header(
title = "Table 3. Infection history and immunization status",
subtitle = "Primary and challenge infection combinations"
) %>%
cols_label(
primary_infection = "Primary Infection",
challenge_infection = "Challenge Infection",
immunization = "Immune Status",
current_infection = "Final Status",
n = "n"
) %>%
# Make species names italic
text_transform(
locations = cells_body(columns = c(primary_infection, challenge_infection, current_infection)),
fn = function(x) {
case_when(
str_detect(x, "E\\.") ~ paste0("<em>", x, "</em>"),
TRUE ~ x
)
}
) %>%
fmt_markdown(columns = c(primary_infection, challenge_infection, current_infection)) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels()
) %>%
# Add totals
summary_rows(
columns = n,
fns = list(Total = ~sum(.))
)
# Step 1: UNGROUP the data first
lab_clean <- lab %>% ungroup()
# Load your data (assuming lab_clean is your laboratory data)
library(dplyr)
# Basic infection counts from Table 2 data
infection_counts <- lab_clean %>%
count(current_infection) %>%
arrange(current_infection)
print("Basic infection counts:")
print(infection_counts)
# Get weight loss statistics by infection type
weight_loss_stats <- lab_clean %>%
group_by(current_infection) %>%
summarise(
n = n(),
mean_WL = mean(WL_max, na.rm = TRUE),
min_WL = min(WL_max, na.rm = TRUE),
max_WL = max(WL_max, na.rm = TRUE),
sd_WL = sd(WL_max, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(across(where(is.numeric), ~round(.x, 1)))
print("Weight loss statistics by infection:")
print(weight_loss_stats)
# Get weight loss by infection history (primary vs challenge)
# First, let's see what infection_history values you have
unique_infection_history <- lab_clean %>%
distinct(infection_history, immunization) %>%
arrange(infection_history)
print("Unique infection histories:")
print(unique_infection_history)
# Get weight loss by primary vs challenge infections
primary_challenge_stats <- lab_clean %>%
filter(!is.na(immunization)) %>%
group_by(current_infection, immunization) %>%
summarise(
n = n(),
mean_WL = mean(WL_max, na.rm = TRUE),
min_WL = min(WL_max, na.rm = TRUE),
max_WL = max(WL_max, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(across(where(is.numeric), ~round(.x, 1)))
print("Weight loss by infection type and immunization status:")
print(primary_challenge_stats)
# Get the specific numbers you need for your text
# Total mice infected
total_ferrisi <- sum(lab_clean$current_infection == "E. ferrisi", na.rm = TRUE)
total_falciformis <- sum(lab_clean$current_infection == "E. falciformis", na.rm = TRUE)
total_uninfected <- sum(lab_clean$current_infection == "Uninfected controls", na.rm = TRUE)
cat("\n=== NUMBERS FOR YOUR RESULTS TEXT ===\n")
cat("Total E. ferrisi infected:", total_ferrisi, "\n")
cat("Total E. falciformis infected:", total_falciformis, "\n")
cat("Total uninfected controls:", total_uninfected, "\n")
# Get min/max for each group
ferrisi_stats <- lab_clean %>%
filter(current_infection == "E. ferrisi") %>%
summarise(
mean = round(mean(WL_max, na.rm = TRUE), 1),
min = round(min(WL_max, na.rm = TRUE), 1),
max = round(max(WL_max, na.rm = TRUE), 1)
)
falciformis_stats <- lab_clean %>%
filter(current_infection == "E. falciformis") %>%
summarise(
mean = round(mean(WL_max, na.rm = TRUE), 1),
min = round(min(WL_max, na.rm = TRUE), 1),
max = round(max(WL_max, na.rm = TRUE), 1)
)
uninfected_stats <- lab_clean %>%
filter(current_infection == "Uninfected controls") %>%
summarise(
mean = round(mean(WL_max, na.rm = TRUE), 1),
min = round(min(WL_max, na.rm = TRUE), 1),
max = round(max(WL_max, na.rm = TRUE), 1)
)
cat("\nE. ferrisi stats - Mean:", ferrisi_stats$mean, "%, Min:", ferrisi_stats$min, "%, Max:", ferrisi_stats$max, "%\n")
cat("E. falciformis stats - Mean:", falciformis_stats$mean, "%, Min:", falciformis_stats$min, "%, Max:", falciformis_stats$max, "%\n")
cat("Uninfected stats - Mean:", uninfected_stats$mean, "%, Min:", uninfected_stats$min, "%, Max:", uninfected_stats$max, "%\n")
# Check if you have separate primary and challenge data
if("Parasite_primary" %in% colnames(lab_clean)) {
primary_stats <- lab_clean %>%
filter(!is.na(Parasite_primary), Parasite_primary != "uninfected") %>%
group_by(Parasite_primary) %>%
summarise(
n = n(),
mean_WL = round(mean(WL_max, na.rm = TRUE), 1),
min_WL = round(min(WL_max, na.rm = TRUE), 1),
max_WL = round(max(WL_max, na.rm = TRUE), 1),
.groups = "drop"
)
cat("\nPRIMARY INFECTION STATS:\n")
print(primary_stats)
}
if("Parasite_challenge" %in% colnames(lab_clean)) {
challenge_stats <- lab_clean %>%
filter(!is.na(Parasite_challenge), Parasite_challenge != "uninfected") %>%
group_by(Parasite_challenge) %>%
summarise(
n = n(),
mean_WL = round(mean(WL_max, na.rm = TRUE), 1),
min_WL = round(min(WL_max, na.rm = TRUE), 1),
max_WL = round(max(WL_max, na.rm = TRUE), 1),
.groups = "drop"
)
cat("\nCHALLENGE INFECTION STATS:\n")
print(challenge_stats)
}
# Verify the primary vs challenge infection counts
mice_with_both <- lab_clean %>%
filter(!is.na(Parasite_primary) & !is.na(Parasite_challenge)) %>%
nrow()
mice_primary_only <- lab_clean %>%
filter(!is.na(Parasite_primary) & is.na(Parasite_challenge)) %>%
nrow()
cat("Mice with both primary and challenge:", mice_with_both, "\n")
cat("Mice with primary only:", mice_primary_only, "\n")
# Also check the experimental design
table(lab_clean$immunization)
# Load your data (assuming lab_clean is your laboratory data)
library(dplyr)
# Basic infection counts from Table 2 data
infection_counts <- lab_clean %>%
count(current_infection) %>%
arrange(current_infection)
print("Basic infection counts:")
print(infection_counts)
# Get weight loss statistics by infection type
weight_loss_stats <- lab_clean %>%
group_by(current_infection) %>%
summarise(
n = n(),
mean_WL = mean(WL_max, na.rm = TRUE),
min_WL = min(WL_max, na.rm = TRUE),
max_WL = max(WL_max, na.rm = TRUE),
sd_WL = sd(WL_max, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(across(where(is.numeric), ~round(.x, 1)))
print("Weight loss statistics by infection:")
print(weight_loss_stats)
# Complete analysis to understand the experimental design
library(dplyr)
# 1. Basic overview
cat("=== BASIC OVERVIEW ===\n")
cat("Total mice:", nrow(lab_clean), "\n")
table(lab_clean$current_infection)
# 2. Understand the experimental structure
cat("\n=== EXPERIMENTAL STRUCTURE ===\n")
cat("Unique infection histories:\n")
table(lab_clean$infection_history)
cat("\nImmunization status:\n")
table(lab_clean$immunization)
# 3. Cross-tabulation to see the full picture
cat("\n=== INFECTION HISTORY vs CURRENT INFECTION ===\n")
cross_tab <- table(lab_clean$infection_history, lab_clean$current_infection)
print(cross_tab)
# 4. Primary vs Challenge breakdown
cat("\n=== PRIMARY INFECTION BREAKDOWN ===\n")
if("Parasite_primary" %in% colnames(lab_clean)) {
primary_breakdown <- lab_clean %>%
count(Parasite_primary, current_infection) %>%
arrange(Parasite_primary, current_infection)
print(primary_breakdown)
}
cat("\n=== CHALLENGE INFECTION BREAKDOWN ===\n")
if("Parasite_challenge" %in% colnames(lab_clean)) {
challenge_breakdown <- lab_clean %>%
count(Parasite_challenge, current_infection) %>%
arrange(Parasite_challenge, current_infection)
print(challenge_breakdown)
}
# 5. Check for mice that had primary only vs primary + challenge
cat("\n=== PRIMARY vs PRIMARY+CHALLENGE ===\n")
primary_challenge_status <- lab_clean %>%
mutate(
had_primary = !is.na(Parasite_primary) & Parasite_primary != "uninfected",
had_challenge = !is.na(Parasite_challenge) & Parasite_challenge != "uninfected",
experiment_type = case_when(
had_primary & had_challenge ~ "Primary + Challenge",
had_primary & !had_challenge ~ "Primary only",
!had_primary & had_challenge ~ "Challenge only",
TRUE ~ "Neither"
)
) %>%
count(experiment_type)
print(primary_challenge_status)
# 6. Weight loss by the ACTUAL experimental groups
cat("\n=== WEIGHT LOSS BY ACTUAL EXPERIMENTAL DESIGN ===\n")
weight_by_design <- lab_clean %>%
group_by(infection_history, current_infection) %>%
summarise(
n = n(),
mean_WL = round(mean(WL_max, na.rm = TRUE), 1),
min_WL = round(min(WL_max, na.rm = TRUE), 1),
max_WL = round(max(WL_max, na.rm = TRUE), 1),
.groups = "drop"
) %>%
arrange(current_infection, infection_history)
print(weight_by_design)
View(Challenge)
# ***********************************************************
# Title: Predicting the health outcomes of infections in hybrid mice
# Purpose: This script defines all the settings and executes
#         all the code (.R, .md) to reproduce the analysis
#         of the project
#
# Authors: Fay Webster
# ID variables:
# ***********************************************************
# Part 1: Set standard settings & install packages            ----
# ***********************************************************
# Install packages/load libraries to keep R environment stable
# install
# pacman for simplified bulk pkg import
# renv for pkg consistency over time
#install.packages("pacman")
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
library(pacman)
## Standard settings ----
# seed
set.seed(13102023)
# Use p_load to install (if not already) and load the packages
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork,FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools,modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext, kableExtra, webshot, broom, kableExtra, gt,
flextable)
## Define within project file paths ----
# code
c <- "code"
clab      <- paste0(c, "/lab/")
cfield     <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # experimental project design
nmi   <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# data
# building dynamic paths
# Get the user's profile directory on Windows
user_profile <- Sys.getenv("USERPROFILE")
# Append the specific path
one_drive <- file.path(user_profile, "OneDrive",
"Documents", "GitHub", "Hybrid_health_outcomes")
# relative_path is the desired path
d <- paste0(one_drive, "/data")
# labs
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# field
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# output
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables  <- paste0(output, "/tables")
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
## Define functions ----
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data cleaning - lab                        ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw data & save as intermediate/processed
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_import.R"))
#----------------------------------------------------------*
# 2.2: Conduct cleaning (formatting)
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))
#----------------------------------------------------------*
# 2.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))
# Creates: Correlation matrix between laboratory gene expression values
# ***********************************************************
# Part 3: Run field infection data cleaning                      ----
# **********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate/processed
# Requires:
# Creates: field_cleaned_data.csv
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct cleaning (formatting) w/o changing data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Import amplicon infection intensities and join with field
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
# Add custom colours for parasites throughout the scripts
# Creates factor levels for parasite strains
#----------------------------------------------------------*
