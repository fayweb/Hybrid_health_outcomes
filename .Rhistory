)
# Create comprehensive validation table
validation_summary <- combined_effects %>%
mutate(
lab_significant = lab_pvalue < 0.05,
field_significant = field_pvalue < 0.05,
both_significant = lab_significant & field_significant,
direction_match = sign(lab_estimate) == sign(field_estimate),
effect_size_ratio = field_estimate / lab_estimate
) %>%
arrange(desc(abs(lab_estimate))) %>%  # Order by strongest lab effects
dplyr::select(gene, term, lab_estimate, lab_pvalue, field_estimate, field_pvalue,
direction_match, both_significant) %>%
mutate(
lab_estimate = round(lab_estimate, 2),
field_estimate = round(field_estimate, 2),
lab_pvalue = round(lab_pvalue, 3),
field_pvalue = round(field_pvalue, 3)
)
# Create publication-ready table
publication_validation_table <- validation_summary %>%
gt() %>%
tab_header(
title = "Translational Validation: Laboratory vs. Field Immune Responses",
subtitle = md("Comparison of effect sizes for *Eimeria* infections across populations")
) %>%
cols_label(
gene = "Gene",
term = "Species",
lab_estimate = "Estimate",
lab_pvalue = "P-value",
field_estimate = "Estimate",
field_pvalue = "P-value",
direction_match = "Direction Match",
both_significant = "Both Significant"
) %>%
tab_spanner(
label = "Laboratory (n=136)",
columns = c(lab_estimate, lab_pvalue)
) %>%
tab_spanner(
label = "Field (n=169)",
columns = c(field_estimate, field_pvalue)
) %>%
tab_spanner(
label = "Validation",
columns = c(direction_match, both_significant)
) %>%
# Highlight significant results
data_color(
columns = lab_pvalue,
colors = scales::col_numeric(
palette = c("red", "white"),
domain = c(0, 0.05),
reverse = TRUE
)
) %>%
data_color(
columns = field_pvalue,
colors = scales::col_numeric(
palette = c("red", "white"),
domain = c(0, 0.05),
reverse = TRUE
)
) %>%
# Bold gene names
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = gene)
) %>%
# Italicize species names
tab_style(
style = cell_text(style = "italic"),
locations = cells_body(columns = term)
) %>%
tab_source_note(
source_note = md("**Key finding:** CXCL9 shows strongest and most consistent response across populations. Color coding indicates p-values < 0.05 in red.")
)
# Print the validation table
print(publication_validation_table)
# Save the table
gtsave(publication_validation_table,
paste0(tables_fi, "/translational_validation_table.html"))
cat("\n=== STATISTICS FOR MANUSCRIPT TEXT ===\n")
cat("Sample sizes: Laboratory n =", nrow(lab), ", Field n =", sum(!is.na(field$species_Eimeria)), "\n")
cat("Total gene-species comparisons:", nrow(combined_effects), "\n")
cat("CXCL9 effect sizes:\n")
cxcl9_effects <- combined_effects %>% filter(gene == "CXCL9")
for(i in 1:nrow(cxcl9_effects)) {
cat("  ", cxcl9_effects$term[i], "- Lab:", round(cxcl9_effects$lab_estimate[i], 2),
", Field:", round(cxcl9_effects$field_estimate[i], 2), "\n")
}
cat("Genes with consistent significant responses across populations:\n")
consistent_genes <- validation_summary %>%
filter(both_significant == TRUE) %>%
pull(gene) %>% unique()
cat("  ", paste(consistent_genes, collapse = ", "), "\n")
cat("\nThis analysis demonstrates successful translational validation of immune signatures!\n")
# Combine datasets for correlation analysis
combined_effects <- lab_clean %>%
dplyr::select(gene, term, lab_estimate = estimate, lab_pvalue = p.value) %>%
inner_join(
field_clean %>% dplyr::select(gene, term, field_estimate = estimate, field_pvalue = p.value),
by = c("gene", "term")
)
# Calculate key translational validation statistics
translation_stats <- list()
# 1. Correlation between lab and field effect sizes
correlation_result <- cor.test(combined_effects$lab_estimate,
combined_effects$field_estimate)
# 2. Direction consistency (how many genes go same direction?)
direction_consistency <- combined_effects %>%
mutate(same_direction = sign(lab_estimate) == sign(field_estimate)) %>%
summarise(
total_comparisons = n(),
consistent_directions = sum(same_direction),
consistency_percent = round(100 * consistent_directions / total_comparisons, 1)
)
# 3. Significance overlap (genes significant in both populations)
significance_overlap <- combined_effects %>%
mutate(
both_significant = (lab_pvalue < 0.05) & (field_pvalue < 0.05),
lab_only = (lab_pvalue < 0.05) & (field_pvalue >= 0.05),
field_only = (lab_pvalue >= 0.05) & (field_pvalue < 0.05)
) %>%
summarise(
both_sig = sum(both_significant),
lab_only_sig = sum(lab_only),
field_only_sig = sum(field_only),
total_lab_sig = sum(lab_pvalue < 0.05),
total_field_sig = sum(field_pvalue < 0.05)
)
# Store all validation statistics
translation_stats$correlation <- correlation_result
translation_stats$direction_consistency <- direction_consistency
translation_stats$significance_overlap <- significance_overlap
# Print key validation statistics
cat("=== TRANSLATIONAL VALIDATION RESULTS ===\n")
cat("Correlation between lab and field effects: r =",
round(translation_stats$correlation$estimate, 3),
", p =", round(translation_stats$correlation$p.value, 3), "\n")
cat("Direction consistency:", translation_stats$direction_consistency$consistency_percent,
"% (", translation_stats$direction_consistency$consistent_directions, "/",
translation_stats$direction_consistency$total_comparisons, ")\n")
cat("Genes significant in both populations:", translation_stats$significance_overlap$both_sig, "\n")
# Set common axis limits for comparison
common_y_limits <- c(-7, 7)
color_scheme <- c("E. falciformis" = "#FF0000", "E. ferrisi" = "#7A0092")
# Panel A: Laboratory signatures (baseline)
panel_A <- ggplot(lab_clean, aes(x = gene, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5), size = 2) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0.2, position = position_dodge(width = 0.5)) +
# Add significance stars
geom_text(aes(label = significance),
position = position_dodge(width = 0.5),
hjust = -0.3, size = 3, show.legend = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
scale_color_manual(values = color_scheme) +
scale_y_continuous(limits = common_y_limits) +
theme_classic() +
theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 10),
legend.position = "top",
legend.title = element_blank()) +
labs(x = "Immune Gene",
y = "Effect Size vs. Uninfected Controls",
subtitle = paste0("Laboratory infections establish immune signatures (n=", nrow(lab), ")")) +
guides(color = guide_legend(override.aes = list(size = 3)))
panel_A
library(FactoMineR)
library(factoextra)
# Prepare data for PCA (both lab and field mice)
pca_data <- hm %>%
filter(origin %in% c("Lab", "Field")) %>%
select(all_of(dependent_vars), origin, current_infection, species_Eimeria) %>%
# Create unified infection status for coloring
mutate(
infection_status = case_when(
origin == "Lab" & current_infection == "uninfected" ~ "Uninfected",
origin == "Lab" & current_infection == "E. ferrisi" ~ "E. ferrisi",
origin == "Lab" & current_infection == "E. falciformis" ~ "E. falciformis",
origin == "Field" & is.na(species_Eimeria) ~ "Uninfected",
origin == "Field" & species_Eimeria == "E. ferrisi" ~ "E. ferrisi",
origin == "Field" & species_Eimeria == "E. falciformis" ~ "E. falciformis",
TRUE ~ "Other"
)
) %>%
filter(infection_status != "Other") %>%  # Remove ambiguous cases
drop_na()
# Prepare data for PCA (both lab and field mice)
pca_data <- hm %>%
filter(origin %in% c("Lab", "Field")) %>%
dplyr::select(all_of(dependent_vars), origin, current_infection, species_Eimeria) %>%
# Create unified infection status for coloring
mutate(
infection_status = case_when(
origin == "Lab" & current_infection == "uninfected" ~ "Uninfected",
origin == "Lab" & current_infection == "E. ferrisi" ~ "E. ferrisi",
origin == "Lab" & current_infection == "E. falciformis" ~ "E. falciformis",
origin == "Field" & is.na(species_Eimeria) ~ "Uninfected",
origin == "Field" & species_Eimeria == "E. ferrisi" ~ "E. ferrisi",
origin == "Field" & species_Eimeria == "E. falciformis" ~ "E. falciformis",
TRUE ~ "Other"
)
) %>%
filter(infection_status != "Other") %>%  # Remove ambiguous cases
drop_na()
# Perform PCA on immune genes only
pca_matrix <- pca_data %>%
select(all_of(dependent_vars)) %>%
as.matrix()
pca_data
# Perform PCA on immune genes only
pca_matrix <- pca_data %>%
dplyr::select(all_of(dependent_vars)) %>%
as.matrix()
pca_matrix
# Run PCA
pca_result <- PCA(pca_matrix, scale.unit = TRUE, graph = FALSE)
# STEP 1: Fix the data preparation with proper type conversion
pca_data <- hm %>%
filter(origin %in% c("Lab", "Field")) %>%
dplyr::select(all_of(dependent_vars), origin, current_infection, species_Eimeria) %>%
# Ensure gene expression values are numeric (not character)
mutate(across(all_of(dependent_vars), as.numeric)) %>%
# Create unified infection status for coloring
mutate(
infection_status = case_when(
origin == "Lab" & current_infection == "uninfected" ~ "Uninfected",
origin == "Lab" & current_infection == "E. ferrisi" ~ "E. ferrisi",
origin == "Lab" & current_infection == "E. falciformis" ~ "E. falciformis",
origin == "Field" & is.na(species_Eimeria) ~ "Uninfected",
origin == "Field" & species_Eimeria == "E. ferrisi" ~ "E. ferrisi",
origin == "Field" & species_Eimeria == "E. falciformis" ~ "E. falciformis",
TRUE ~ "Other"
)
) %>%
filter(infection_status != "Other") %>%  # Remove ambiguous cases
drop_na(all_of(dependent_vars))  # Only drop NA for gene columns
# Check the data structure
cat("=== PCA DATA STRUCTURE CHECK ===\n")
cat("Dimensions:", dim(pca_data), "\n")
cat("Sample of gene values (should be numeric):\n")
print(pca_data[1:3, c("CXCL9", "IFNy", "TNF")])
cat("Data types of gene columns:\n")
print(sapply(pca_data[,dependent_vars], class))
# STEP 2: Create PCA matrix with ONLY numeric gene columns
pca_matrix <- pca_data %>%
dplyr::select(all_of(dependent_vars)) %>%  # Only gene columns
as.matrix()
# Verify matrix is numeric
cat("Matrix class:", class(pca_matrix[,1]), "\n")
cat("Matrix dimensions:", dim(pca_matrix), "\n")
# STEP 3: Run PCA with error handling
tryCatch({
pca_result <- PCA(pca_matrix, scale.unit = TRUE, graph = FALSE)
cat("✅ PCA successful!\n")
}, error = function(e) {
cat("❌ PCA failed:", e$message, "\n")
cat("First few values of matrix:\n")
print(pca_matrix[1:3, 1:5])
stop("PCA failed - check data types above")
})
# STEP 4: Extract PCA results and add metadata
pca_scores <- data.frame(
PC1 = pca_result$ind$coord[,1],
PC2 = pca_result$ind$coord[,2],
origin = pca_data$origin,
infection_status = pca_data$infection_status
)
# Calculate variance explained
variance_explained <- round(pca_result$eig[1:2, 2], 1)
cat("=== PCA RESULTS ===\n")
cat("PC1 variance explained:", variance_explained[1], "%\n")
cat("PC2 variance explained:", variance_explained[2], "%\n")
cat("Total variance captured:", sum(variance_explained), "%\n")
cat("PCA scores dimensions:", dim(pca_scores), "\n")
# STEP 5: Create PCA plot
population_colors <- c("Lab" = "#FFA500", "Field" = "#4169E1")
panel_C_pca <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = origin, shape = infection_status)) +
geom_point(size = 2.5, alpha = 0.7) +
# Add confidence ellipses for populations
stat_ellipse(aes(color = origin), type = "norm", level = 0.95, size = 1, alpha = 0.3) +
scale_color_manual(values = population_colors,
name = "Population",
labels = c("Field" = "Field-caught mice", "Lab" = "Laboratory mice")) +
scale_shape_manual(values = c("Uninfected" = 16, "E. ferrisi" = 17, "E. falciformis" = 15),
name = "Infection Status") +
theme_classic() +
theme(legend.position = "right",
legend.box = "vertical",
legend.title = element_text(face = "bold", size = 10),
legend.text = element_text(size = 9)) +
labs(x = paste0("PC1 (", variance_explained[1], "% variance)"),
y = paste0("PC2 (", variance_explained[2], "% variance)"),
subtitle = paste0("Population overlap supports translational validity (Total: ",
sum(variance_explained), "% variance)")) +
guides(color = guide_legend(override.aes = list(size = 3)),
shape = guide_legend(override.aes = list(size = 3)))
# Display the PCA plot
print(panel_C_pca)
# Filter the data for relevant columns and origin
wild_and_lab <- hm %>%
dplyr::ungroup() %>%
dplyr::select(Mouse_ID, origin, infection_status, species_Eimeria, all_of(Genes_v))  # Include infection variables
# Perform PCA on the gene expression data (excluding 'origin' column for PCA)
pca_input <- wild_and_lab %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
# Run PCA
res_pca <- PCA(pca_input, graph = FALSE)
# Extract PCA coordinates
pca_coordinates <- as.data.frame(res_pca$ind$coord) %>%
dplyr::mutate(origin = wild_and_lab$origin,
infection_status = wild_and_lab$infection_status,
species_Eimeria = wild_and_lab$species_Eimeria)  # Add origin for grouping
# Modify PCA plot
pca_plot <- ggplot(pca_coordinates, aes(x = Dim.1, y = Dim.2, color = origin, fill = origin)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
fill = "Sample Type"    # Rename "Origin"
) +
scale_color_viridis_d(option = "C", begin = 0.01, end = 0.8) +  # Use a beautiful viridis palette
scale_fill_viridis_d(option = "C", begin = 0.01, end = 0.8) +   # Use the same palette for fill
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
# Filter the data for relevant columns and origin
wild_and_lab <- hm %>%
dplyr::ungroup() %>%
dplyr::select(Mouse_ID, origin, infection_status, species_Eimeria, all_of(Genes_v))  # Include infection variables
# Perform PCA on the gene expression data (excluding 'origin' column for PCA)
pca_input <- wild_and_lab %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
# Extract PCA coordinates
pca_coordinates <- as.data.frame(res_pca$ind$coord) %>%
dplyr::mutate(origin = wild_and_lab$origin,
infection_status = wild_and_lab$infection_status,
species_Eimeria = wild_and_lab$species_Eimeria)  # Add origin for grouping
# Modify PCA plot
pca_plot <- ggplot(pca_coordinates, aes(x = Dim.1, y = Dim.2, color = origin, fill = origin)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
fill = "Sample Type"    # Rename "Origin"
) +
scale_color_viridis_d(option = "C", begin = 0.01, end = 0.8) +  # Use a beautiful viridis palette
scale_fill_viridis_d(option = "C", begin = 0.01, end = 0.8) +   # Use the same palette for fill
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
# Run PCA
res_pca <- PCA(pca_input, graph = FALSE)
# Extract PCA coordinates
pca_coordinates <- as.data.frame(res_pca$ind$coord) %>%
dplyr::mutate(origin = wild_and_lab$origin,
infection_status = wild_and_lab$infection_status,
species_Eimeria = wild_and_lab$species_Eimeria)  # Add origin for grouping
# Modify PCA plot
pca_plot <- ggplot(pca_coordinates, aes(x = Dim.1, y = Dim.2, color = origin, fill = origin)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
fill = "Sample Type"    # Rename "Origin"
) +
scale_color_viridis_d(option = "C", begin = 0.01, end = 0.8) +  # Use a beautiful viridis palette
scale_fill_viridis_d(option = "C", begin = 0.01, end = 0.8) +   # Use the same palette for fill
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
# Display the modified plot
print(pca_plot)
# Save the modified plot
ggsave(
filename = paste0(an_fi, "/PCA_Wild_Lab_Gene_Expression_Modified.pdf"),
plot = pca_plot,
width = 8,
height = 6,
dpi = 300
)
###############################################################################
# creating variables showing origin and infection status
# Create a new variable combining 'origin' and 'infection_status'
pca_coordinates <- pca_coordinates %>%
dplyr::mutate(
origin_infection = case_when(
infection_status == TRUE ~ paste0(origin, "_infected"),
infection_status == FALSE ~ paste0(origin, "_uninfected")
),
origin_species = paste0(origin, species_Eimeria)
)
# Check the updated dataframe
head(pca_coordinates)
# Modify PCA plot with shape based on infection_status
ggplot(pca_coordinates %>%
drop_na(infection_status), aes(x = Dim.1, y = Dim.2, color = origin_infection, fill = origin_infection)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
shape = "Infection Status",  # Add legend for shape
fill = "Sample Type"
) +
#scale_color_viridis_d(option = "C", begin = 0.2, end = 0.8) +  # Use a beautiful viridis palette
#scale_fill_viridis_d(option = "C", begin = 0.2, end = 0.8) +   # Use the same palette for fill
scale_shape_manual(values = c(16, 17)) +  # Map shapes (e.g., circle = 16, triangle = 17)
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
# Modify PCA plot with shape based on infection_status
ggplot(pca_coordinates %>%
drop_na(species_Eimeria), aes(x = Dim.1, y = Dim.2, color = origin_species, fill = origin_species)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
shape = "Infection Status",  # Add legend for shape
fill = "Sample Type"
) +
#scale_color_viridis_d(option = "C", begin = 0.2, end = 0.8) +  # Use a beautiful viridis palette
#scale_fill_viridis_d(option = "C", begin = 0.2, end = 0.8) +   # Use the same palette for fill
scale_shape_manual(values = c(16, 17)) +  # Map shapes (e.g., circle = 16, triangle = 17)
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
################PCA
# Filter the data for relevant columns and origin
wild_and_lab <- hm %>%
dplyr::ungroup() %>%
dplyr::select(Mouse_ID, origin, infection_status, species_Eimeria, all_of(Genes_v))  # Include infection variables
# Perform PCA on the gene expression data (excluding 'origin' column for PCA)
pca_input <- wild_and_lab %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
# Run PCA
res_pca <- PCA(pca_input, graph = FALSE)
# Extract PCA coordinates
pca_coordinates <- as.data.frame(res_pca$ind$coord) %>%
dplyr::mutate(origin = wild_and_lab$origin,
infection_status = wild_and_lab$infection_status,
species_Eimeria = wild_and_lab$species_Eimeria)  # Add origin for grouping
# Modify PCA plot
pca_plot <- ggplot(pca_coordinates, aes(x = Dim.1, y = Dim.2, color = origin, fill = origin)) +
geom_point(size = 3, alpha = 0.7) +
stat_ellipse(geom = "polygon", alpha = 0.3, linetype = "dashed") +
labs(
x = paste0("PC1 (", round(res_pca$eig[1, 2], 1), "% variance explained)"),
y = paste0("PC2 (", round(res_pca$eig[2, 2], 1), "% variance explained)"),
color = "Sample Type",  # Rename "Origin"
fill = "Sample Type"    # Rename "Origin"
) +
scale_color_viridis_d(option = "C", begin = 0.01, end = 0.8) +  # Use a beautiful viridis palette
scale_fill_viridis_d(option = "C", begin = 0.01, end = 0.8) +   # Use the same palette for fill
theme_minimal(base_size = 16) +
theme(
legend.position = "top",
plot.title = element_blank(),  # Remove the title
axis.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14, face = "bold")
)
# Display the modified plot
print(pca_plot)
# Save the modified plot
ggsave(
filename = paste0(an_fi, "/PCA_Wild_Lab_Gene_Expression_Modified.pdf"),
plot = pca_plot,
width = 8,
height = 6,
dpi = 300
)
