source_note = "Framework demonstrates progression from basic linear prediction (R² = 0.106) through machine learning optimization (R² = 0.476) to comprehensive field validation with biological relevance. Cross-population translation validates 3/19 genes as conserved biomarkers."
) %>%
# Format text properly
fmt_markdown(columns = c(Method, Key_Result))
# Print the table
print(statistical_framework_table)
cat("=== CORRECTED TABLE 1 VALUES CONFIRMED ===\n")
# Create the publication-ready gt table
statistical_framework_table <- statistical_framework_data %>%
gt(groupname_col = "Phase_Group") %>%
tab_header(
title = "",
subtitle = ""
) %>%
cols_label(
Phase = "Analysis Phase",
Research_Question = "Research Question",
Analysis = "Model ID",
Method = "Statistical Method",
Key_Result = "Key Finding",
Sample_Size = "Sample Size",
Performance = "Performance Metric¹"
) %>%
# Enhanced styling for group headers
tab_style(
style = list(
cell_fill(color = "#E3F2FD"),
cell_text(weight = "bold", size = px(13), color = "#1565C0")
),
locations = cells_row_groups()
) %>%
# Style column headers
tab_style(
style = list(
cell_text(weight = "bold", size = px(12)),
cell_fill(color = "#F5F5F5")
),
locations = cells_column_labels()
) %>%
# Highlight Model ID column
tab_style(
style = list(
cell_text(weight = "bold", color = "#1976D2"),
cell_fill(color = "#FAFAFA")
),
locations = cells_body(columns = Analysis)
) %>%
# Style performance metrics with significance
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = Performance)
) %>%
# Highlight significant results
tab_style(
style = cell_text(color = "#D32F2F", weight = "bold"),
locations = cells_body(
columns = Performance,
rows = str_detect(Performance, "\\*")
)
) %>%
# Add comprehensive footnotes with CORRECT information
tab_footnote(
footnote = "Significance levels: *p < 0.05, **p < 0.01, ***p < 0.001",
locations = cells_column_labels(columns = Performance)
) %>%
tab_footnote(
footnote = "Cross-validated genes: CXCL9 (both species), TICAM1 (E. falciformis), PRF1 (E. falciformis)",
locations = cells_body(columns = Key_Result, rows = 4)
) %>%
tab_footnote(
footnote = "E.f: Eimeria falciformis; E.r: E. ferrisi",
locations = cells_body(columns = Performance, rows = 6)
) %>%
tab_footnote(
footnote = "Train-test validation: 70% training (n=96), 30% testing (n=40)",
locations = cells_body(columns = Sample_Size, rows = 3)
) %>%
tab_footnote(
footnote = "Parasite community model tested: Eimeria (significant), Aspiculuris, Syphacia, Trichuris, Mastophorus (all non-significant)",
locations = cells_body(columns = Key_Result, rows = 9)
) %>%
# Adjust column widths for better readability
cols_width(
Phase ~ px(140),
Research_Question ~ px(220),
Analysis ~ px(90),
Method ~ px(280),
Key_Result ~ px(220),
Sample_Size ~ px(100),
Performance ~ px(140)
) %>%
# Add comprehensive source note
tab_source_note(
source_note = "Framework demonstrates progression from basic linear prediction (R² = 0.106) through machine learning optimization (R² = 0.476) to comprehensive field validation with biological relevance. Cross-population translation validates 3/19 genes as conserved biomarkers."
) %>%
# Format text properly
fmt_markdown(columns = c(Method, Key_Result))
# Print the table
print(statistical_framework_table)
cat("=== CORRECTED TABLE 1 VALUES CONFIRMED ===\n")
cat("✅ DISC-1: R² = 0.106, F = 7.92, p < 0.001, n = 136\n")
cat("✅ DISC-2: R² = 0.476 (47.6% var explained), 308 trees, n = 136\n")
cat("✅ DISC-3: r = 0.787 ≈ 0.79, p = 1.77e-09, n = 40 (test set)\n")
cat("✅ TRANS-1: 3 genes validated (CXCL9, TICAM1, PRF1), n = 305\n")
cat("✅ FIELD-1: +1.15%, p = 5.07e-05, R² = 0.053, n = 305\n")
cat("✅ FIELD-2: E.f: +2.06% (p=0.003), E.r: +1.25% (p=0.004), n = 169\n")
cat("✅ FIELD-3: r = 0.233, p = 0.025 (Spearman), n = 92 infected mice\n")
cat("✅ PROOF-1: ρ = -0.115, p = 0.035, body weight correlation, n = 336\n")
cat("✅ PROOF-2: Eimeria p < 0.001, other parasites p > 0.05, n = 305\n")
# Save the corrected table
save_table_all_formats(statistical_framework_table, "Table_1_Statistical_Framework_CORRECTED_FINAL")
cat("\n🎉 ALL INCONSISTENCIES FIXED! Table ready for manuscript.\n")
library(gt)
library(tibble)
library(dplyr)
library(stringr)
# Create the corrected statistical analysis framework table
create_corrected_statistical_framework_table <- function() {
# Define the table data with ACTUAL values from your outputs
statistical_framework <- tribble(
~Phase, ~Research_Question, ~Analysis, ~Method, ~Key_Result, ~Sample_Size, ~Performance,
# Laboratory Development Phase
"Discovery", "Can immune genes predict infection costs?", "DISC-1", "Linear regression (PC1, PC2 → weight loss)", "Significant but modest prediction", "n = 136", "R² = 0.106***",
"Optimization", "Can machine learning improve prediction?", "DISC-2", "Random forest (19 genes → weight loss)", "Substantial improvement achieved", "n = 136", "R² = 0.476***",
"Validation", "Is the model reliable?", "DISC-3", "Train-test cross-validation", "Strong predictive accuracy", "n = 40 (test set)", "r = 0.79***",
# Cross-Population Translation Phase
"Gene Validation", "Which genes show consistent responses across populations?", "TRANS-1", "Linear regression per gene (lab vs field)", "3 genes cross-validated²", "n = 305", "3/19 genes validated",
# Field Translation Phase
"Detection", "Does the model work in wild populations?", "FIELD-1", "Predicted vs. observed infection status", "Successfully detects infection", "n = 305", "+1.15%***",
"Discrimination", "Can it distinguish parasite species?", "FIELD-2", "Predicted loss by species identity", "Species-specific responses", "n = 169", "E.f: +2.06%** E.r: +1.25%**",
"Scaling", "Does it correlate with infection severity?", "FIELD-3", "Predicted loss vs. parasite load", "Scales with infection intensity", "n = 185", "R² = 0.114***",
# Biological Validation Phase
"Physiological relevance", "Does it capture real health impacts?", "PROOF-1", "Predicted loss vs. body condition", "Correlates with actual body weight", "n = 336", "β = -0.076*",
"Specificity", "Is the response Eimeria-specific?", "PROOF-2", "Predicted loss vs. parasite community", "Specific to Eimeria infections only", "n = 305", "p < 0.001***"
) %>%
mutate(
# Add phase groupings
Phase_Group = case_when(
Phase %in% c("Discovery", "Optimization", "Validation") ~ "Laboratory Development",
Phase %in% c("Gene Validation") ~ "Cross-Population Translation",
Phase %in% c("Detection", "Discrimination", "Scaling") ~ "Field Translation",
Phase %in% c("Physiological relevance", "Specificity") ~ "Biological Validation"
)
) %>%
# Reorder columns
dplyr::select(Phase_Group, Phase, Research_Question, Analysis, Method, Key_Result, Sample_Size, Performance)
return(statistical_framework)
}
# Create the table
statistical_framework_data <- create_corrected_statistical_framework_table()
# Create the publication-ready gt table
statistical_framework_table <- statistical_framework_data %>%
gt(groupname_col = "Phase_Group") %>%
tab_header(
title = "Table 1. Statistical Analysis Framework",
subtitle = "Complete analytical workflow from laboratory development through field validation to biological proof-of-concept"
) %>%
cols_label(
Phase = "Analysis Phase",
Research_Question = "Research Question",
Analysis = "Model ID",
Method = "Statistical Method",
Key_Result = "Key Finding",
Sample_Size = "Sample Size",
Performance = "Performance Metric¹"
) %>%
# Enhanced styling for group headers
tab_style(
style = list(
cell_fill(color = "#E3F2FD"),
cell_text(weight = "bold", size = px(13), color = "#1565C0")
),
locations = cells_row_groups()
) %>%
# Style column headers
tab_style(
style = list(
cell_text(weight = "bold", size = px(12)),
cell_fill(color = "#F5F5F5")
),
locations = cells_column_labels()
) %>%
# Highlight Model ID column
tab_style(
style = list(
cell_text(weight = "bold", color = "#1976D2"),
cell_fill(color = "#FAFAFA")
),
locations = cells_body(columns = Analysis)
) %>%
# Style performance metrics with significance
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = Performance)
) %>%
# Highlight significant results
tab_style(
style = cell_text(color = "#D32F2F", weight = "bold"),
locations = cells_body(
columns = Performance,
rows = str_detect(Performance, "\\*")
)
) %>%
# Add comprehensive footnotes with CORRECT information
tab_footnote(
footnote = "Significance levels: *p < 0.05, **p < 0.01, ***p < 0.001",
locations = cells_column_labels(columns = Performance)
) %>%
tab_footnote(
footnote = "Cross-validated genes: CXCL9 (both species), TICAM1 (E. falciformis), PRF1 (E. falciformis)",
locations = cells_body(columns = Key_Result, rows = 4)
) %>%
tab_footnote(
footnote = "E.f: Eimeria falciformis; E.r: E. ferrisi",
locations = cells_body(columns = Performance, rows = 6)
) %>%
tab_footnote(
footnote = "Train-test validation: 70% training (n=96), 30% testing (n=40)",
locations = cells_body(columns = Sample_Size, rows = 3)
) %>%
tab_footnote(
footnote = "Parasite community model tested: Eimeria (significant), Aspiculuris, Syphacia, Trichuris, Mastophorus (all non-significant)",
locations = cells_body(columns = Key_Result, rows = 9)
) %>%
# Adjust column widths for better readability
cols_width(
Phase ~ px(140),
Research_Question ~ px(220),
Analysis ~ px(90),
Method ~ px(280),
Key_Result ~ px(220),
Sample_Size ~ px(100),
Performance ~ px(140)
) %>%
# Add comprehensive source note
tab_source_note(
source_note = "Framework demonstrates progression from basic linear prediction (R² = 0.106) through machine learning optimization (R² = 0.476) to comprehensive field validation with biological relevance. Cross-population translation validates 3/19 genes as conserved biomarkers."
) %>%
# Format text properly
fmt_markdown(columns = c(Method, Key_Result))
# Print the table
print(statistical_framework_table)
# Create the publication-ready gt table
statistical_framework_table <- statistical_framework_data %>%
gt(groupname_col = "Phase_Group") %>%
tab_header(
title = "",
subtitle = ""
) %>%
cols_label(
Phase = "Analysis Phase",
Research_Question = "Research Question",
Analysis = "Model ID",
Method = "Statistical Method",
Key_Result = "Key Finding",
Sample_Size = "Sample Size",
Performance = "Performance Metric¹"
) %>%
# Enhanced styling for group headers
tab_style(
style = list(
cell_fill(color = "#E3F2FD"),
cell_text(weight = "bold", size = px(13), color = "#1565C0")
),
locations = cells_row_groups()
) %>%
# Style column headers
tab_style(
style = list(
cell_text(weight = "bold", size = px(12)),
cell_fill(color = "#F5F5F5")
),
locations = cells_column_labels()
) %>%
# Highlight Model ID column
tab_style(
style = list(
cell_text(weight = "bold", color = "#1976D2"),
cell_fill(color = "#FAFAFA")
),
locations = cells_body(columns = Analysis)
) %>%
# Style performance metrics with significance
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = Performance)
) %>%
# Highlight significant results
tab_style(
style = cell_text(color = "#D32F2F", weight = "bold"),
locations = cells_body(
columns = Performance,
rows = str_detect(Performance, "\\*")
)
) %>%
# Add comprehensive footnotes with CORRECT information
tab_footnote(
footnote = "Significance levels: *p < 0.05, **p < 0.01, ***p < 0.001",
locations = cells_column_labels(columns = Performance)
) %>%
tab_footnote(
footnote = "Cross-validated genes: CXCL9 (both species), TICAM1 (E. falciformis), PRF1 (E. falciformis)",
locations = cells_body(columns = Key_Result, rows = 4)
) %>%
tab_footnote(
footnote = "E.f: Eimeria falciformis; E.r: E. ferrisi",
locations = cells_body(columns = Performance, rows = 6)
) %>%
tab_footnote(
footnote = "Train-test validation: 70% training (n=96), 30% testing (n=40)",
locations = cells_body(columns = Sample_Size, rows = 3)
) %>%
tab_footnote(
footnote = "Parasite community model tested: Eimeria (significant), Aspiculuris, Syphacia, Trichuris, Mastophorus (all non-significant)",
locations = cells_body(columns = Key_Result, rows = 9)
) %>%
# Adjust column widths for better readability
cols_width(
Phase ~ px(140),
Research_Question ~ px(220),
Analysis ~ px(90),
Method ~ px(280),
Key_Result ~ px(220),
Sample_Size ~ px(100),
Performance ~ px(140)
) %>%
# Add comprehensive source note
tab_source_note(
source_note = "Framework demonstrates progression from basic linear prediction (R² = 0.106) through machine learning optimization (R² = 0.476) to comprehensive field validation with biological relevance. Cross-population translation validates 3/19 genes as conserved biomarkers."
) %>%
# Format text properly
fmt_markdown(columns = c(Method, Key_Result))
# Print the table
print(statistical_framework_table)
cat("=== CORRECTED TABLE 1 VALUES CONFIRMED ===\n")
cat("✅ DISC-1: R² = 0.106, F = 7.92, p < 0.001, n = 136\n")
cat("✅ DISC-2: R² = 0.476 (47.6% var explained), 308 trees, n = 136\n")
cat("✅ DISC-3: r = 0.787 ≈ 0.79, p = 1.77e-09, n = 40 (test set)\n")
cat("✅ TRANS-1: 3 genes validated (CXCL9, TICAM1, PRF1), n = 305\n")
cat("✅ FIELD-1: +1.15%, p = 5.07e-05, R² = 0.053, n = 305\n")
cat("✅ FIELD-2: E.f: +2.06% (p=0.003), E.r: +1.25% (p=0.004), n = 169\n")
cat("✅ FIELD-3: R² = 0.114, interaction p = 0.003, n = 185 (linear regression)\n")
cat("✅ PROOF-1: β = -0.076, p = 0.014, body weight effect, n = 336 (linear regression)\n")
cat("✅ PROOF-2: Eimeria p < 0.001, other parasites p > 0.05, n = 305\n")
# Save the corrected table
save_table_all_formats(statistical_framework_table, "Table_1_Statistical_Framework_CORRECTED_FINAL")
cat("\n🎉 ALL INCONSISTENCIES FIXED! Table ready for manuscript.\n")
source("~/GitHub/Hybrid_health_outcomes/code/master_hm.R", echo = TRUE)
# Part 7: Analysis                           ----
# ***********************************************************
#----------------------------------------------------------*
#7: Random forest
# Training and testing a random forest that predicts weight los
# on experimental infections with Eimeria spp.
# Requires: hm
# Creates random forest model: WL_predict_gene.RData
#----------------------------------------------------------*
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
lab <- hm %>%
filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
ungroup() %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
ungroup() %>%
dplyr::select(c(all_of(Genes_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 26)
# ntree = number of trees
# save the model
saveRDS(WL_predict_gene, file =  paste0(cmodels, "WL_predict_gene_training_data_set.RDS"))
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 26)
predict_WL_cv$fit.var.exp
predict_WL_cv$fit.mse
par(mar=c(1,1,1,1))
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
model_var <- plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
abs_error <- plot(predict_WL_cv, stat = "mae")
#d# ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
WL_predict_gene$mtry
oob_error_rate <- WL_predict_gene$mse[WL_predict_gene$ntree]
oob_error_rate <- 1 - sum(diag(WL_predict_gene$confusion)) / sum(WL_predict_gene$confusion)
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
ImpData <- as.data.frame(randomForest::importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
varImp(WL_predict_gene)
var_imp <- as.data.frame(varImp(WL_predict_gene))
var_imp$Genes <- row.names(var_imp)
var_imp <- var_imp %>%
rename(Importance = Overall)
# Assuming var_imp is your data frame with variables 'Importance' and 'Genes'
var_imp <- var_imp %>%
mutate(Genes = factor(Genes, levels = Genes[order(-Importance)])) # Reorder Genes by decreasing Importance
# Create the plot with a color scale
importance_plot <-
ggplot(var_imp, aes(x = reorder(Genes, Importance), y = Importance, fill = Importance)) +
geom_col() + # Use geom_col for a bar plot; it's more appropriate for importance scores
coord_flip() + # Flip the coordinates to make it easier to read
labs(x = "Genes", y = "IncNodePurity") +#, title = "Variable Importance of Genes") +
theme_minimal() + # A clean, minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), # Adjust text angle for x-axis labels if needed
legend.title = element_blank()) + # Remove the legend title if desired
scale_fill_viridis_c(option = "magma", direction = -1) + # Apply a Viridis color scale with the 'magma' option
theme(legend.position = c(0.8, 0.4))
importance_plot
## S3 method for class 'randomForest'
plot(WL_predict_gene, type = "l", main=deparse(substitute(x)))
variable_importance <- varImpPlot(WL_predict_gene)
ggsave(filename = paste0(an_fi, "/variable_imporance_random.pdf"),
#width = 6, height = 5,
dpi = 300)
ggsave(filename = paste0(an_fi, "/variable_imporance_random.jpeg"),
#width = 6, height = 5,
dpi = 300)
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(randomForest::importance(WL_predict_gene))
# Install and load pdp package if needed
if (!require(pdp)) {
install.packages("pdp")
library(pdp)
}
cat("Creating partial dependence plots for top 3 predictors...\n")
# Get top 3 predictors based on importance
top_3_genes <- var_imp %>%
arrange(desc(Importance)) %>%
head(3) %>%
pull(Genes)
cat("Top 3 predictors:", paste(top_3_genes, collapse = ", "), "\n")
# Generate partial dependence plots
pdp_plots <- list()
for(gene in top_3_genes) {
cat("Processing", gene, "...\n")
# Calculate partial dependence
pd_data <- partial(WL_predict_gene, pred.var = gene, train = train.data)
# Create individual plot
pdp_plots[[gene]] <- pd_data %>%
autoplot() +
labs(title = gene,  # Shorter title for better fit
x = paste(gene, "Expression"),
y = "Predicted Weight Loss (%)") +
theme_minimal() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 10),
axis.text = element_text(size = 9))
}
# Combine partial dependence plots
pdp_combined <- wrap_plots(pdp_plots, ncol = 3)
# Add overall title
pdp_final <- pdp_combined +
plot_annotation(
title = "",
theme = theme(plot.title = element_text(size = 14, hjust = 0.5, face = "bold"))
)
# Save partial dependence plots
ggsave(filename = paste0(an_fi, "/partial_dependence_plots.pdf"),
plot = pdp_final, width = 15, height = 5, dpi = 300)
ggsave(filename = paste0(an_fi, "/partial_dependence_plots.jpeg"),
plot = pdp_final, width = 15, height = 5, dpi = 300)
cat("✅ Partial dependence plots saved!\n")
# Create individual PDP plots for supplementary material
for(i in 1:length(top_3_genes)) {
gene <- top_3_genes[i]
ggsave(filename = paste0(an_fi, "/pdp_individual_", gene, ".pdf"),
plot = pdp_plots[[gene]], width = 5, height = 4, dpi = 300)
}
cat("✅ Individual PDP plots saved for supplementary material!\n")
cat("=====================================\n")
#The predict() function in R is used to predict the values based on the
# input data.
predictions <- predict(WL_predict_gene, test.data)
# assign test.data to a new object, so that we can make changes
result <- test.data
#add the new variable of predictions to the result object
result <- cbind(result, predictions)
