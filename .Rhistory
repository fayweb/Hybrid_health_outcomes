# Part 2: Define Project File Paths ----
# ***********************************************************
# Code directories
c <- "code"
clab <- paste0(c, "/lab/")
cfield <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # Experimental project design
nmi <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# Data directories
user_profile <- Sys.getenv("USERPROFILE")
one_drive <- file.path(user_profile, "OneDrive", "Documents", "GitHub", "Hybrid_health_outcomes")
d <- paste0(one_drive, "/data")
# Lab data paths
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# Field data paths
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# Data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# Output directories
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables <- paste0(output, "/tables")
# Vectors for selecting genes for analysis
Genes_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
# ***********************************************************
# Part 3: Define Custom Functions ----
# ***********************************************************
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data Cleaning - Laboratory Data               ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw laboratory data
#----------------------------------------------------------*
# 2.2: Clean and format lab data
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))  # Harmonizes parasite naming, infection histories, etc.
#----------------------------------------------------------*
# 2.3: Visualize gene correlations
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))  # Generates gene-gene correlation matrix (mLN only)
# ***********************************************************
# Part 3: Field infection data cleaning and integration      ----
# ***********************************************************
# Purpose: Clean field metadata and enrich it with qPCR
#          infection intensities and amplicon-based species
#          identifications. Save intermediate and final versions
#          to ensure modular execution.
#
# Requires: Field_infection_data.csv, CEWE_FECES_infection_intensities.txt,
#           Sample_selection_Metabarcoding_Complete.csv
# Creates: field_imported_raw.csv (intermediate)
#          field_cleaned_intermediate.csv (intermediate)
#          field_cleaned_data.csv (final)
#          cor_genes_field.jpeg (figure)
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct basic cleaning and formatting
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize field gene expression correlations
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Integrate infection intensities and amplicon species calls
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
# Add custom colours for parasites throughout the scripts
# Creates factor levels for parasite strains
#----------------------------------------------------------*
# ***********************************************************
# Part 5: Experimental Design of Laboratory Infections ----
# ***********************************************************
# Purpose: Summarize the experimental setup in the lab infections.
# Outputs: Clean design tables, plots of experimenta
#----------------------------------------------------------*
# 6.4: Random Forest Model Development
# Train and validate random forest model on laboratory data
# Purpose: Build predictive model for weight loss based on immune gene expression
# Requires: Challenge dataset with complete immune gene data and weight loss outcomes
# Creates: Trained random forest model, performance metrics, variable importance
#----------------------------------------------------------*
if (1) source(file.path("code/analysis/lab_infections/random_forest_training.R"))
#----------------------------------------------------------*
# 6.4.1: Random Forest Model Diagnostics
# Generate diagnostic plots and performance validation for RF model
# Purpose: Validate model assumptions and create supplementary figures
# Requires: Trained RF model, test set predictions, cross-validation results
# Creates: Diagnostic plots (residuals, Q-Q, CV performance), correlation matrix, model comparison table
#----------------------------------------------------------*
if (0) source(file.path("code/analysis/lab_infections/random_forest_diagnostics.R"))
#----------------------------------------------------------*
# 6.5 Random Forest Model Validation in Laboratory Data
# Validate RF predictions against known infection parameters in lab data
# Purpose: Test if RF predictions correlate with infection status, species, and intensity
# Requires: Trained RF model, Challenge dataset
# Creates: Validation plots, correlation statistics, species comparison
#----------------------------------------------------------*
if (0) source(file.path(clab_inf, "random_forest_validation.R"))
# ***********************************************************
# Purpose: Apply laboratory-trained RF model to wild mice and validate predictions
# This corresponds to Results section "Random forest predictions in wild-caught mice"
#----------------------------------------------------------*
# 7.1: Apply Random Forest Model to Wild Mice
# Apply lab-trained RF model to predict weight loss in wild mice
# Purpose: Generate weight loss predictions for all wild mice based on immune gene expression
# Requires: Trained RF model (from 6.4), hm dataset (wild mice with immune gene data)
# Creates: hm dataset with predicted weight loss values, application summary stats
#----------------------------------------------------------*
if (1) source(file.path("code/analysis/wild_mice/random_forest_apply_field.R"))
# Parasite community analysis
Field_par <- Field %>%
filter(!is.na(predicted_weight_loss)) %>%
mutate(
infected_Aspiculuris = !is.na(Aspiculuris_sp) & Aspiculuris_sp > 0,
infected_Syphacia = !is.na(Syphacia_sp) & Syphacia_sp > 0,
infected_Trichuris = !is.na(Trichuris_muris) & Trichuris_muris > 0,
infected_Mastophorus = !is.na(Mastophorus_muris) & Mastophorus_muris > 0
) %>%
mutate(
infected_Aspiculuris = as.factor(infected_Aspiculuris),
infected_Syphacia = as.factor(infected_Syphacia),
infected_Trichuris = as.factor(infected_Trichuris),
infected_Mastophorus = as.factor(infected_Mastophorus)
)
length(Filed_par)
length(Field_par
)
# Run the model
parasite_model <- lm(predicted_weight_loss ~ infection_status + infected_Aspiculuris
+ infected_Syphacia + infected_Trichuris + infected_Mastophorus,
data = Field_par)
summary(parasite_model)
broom::tidy(parasite_model)
# Create coefficient plot
plot_summs(parasite_model, plot.distributions = TRUE, robust = TRUE, scale = TRUE,
colors = "skyblue")
ggsave(filename = paste0(an_fi, "/coefficient_plot_parasites.pdf"),
width = 8, height = 6, dpi = 300)
# Calculate BMI (Body Mass Index)
Field <- Field %>%
dplyr::mutate(BMI = Body_Weight / (Body_Length / 100)^2)
# Check BMI distribution
shapiro.test(Field$BMI)  # Test for normality
# Create scatter plot: BMI vs Predicted Weight Loss
bmi_plot <- ggplot(data = Field, aes(x = BMI, y = predicted_weight_loss)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "blue", size = 1) +
labs(
title = "Body Mass Index vs Predicted Weight Loss",
x = "Body Mass Index (BMI)",
y = "Predicted Maximum Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
# Display plot
print(bmi_plot)
# Fit linear model: BMI predicting weight loss
bmi_model <- lm(predicted_weight_loss ~ BMI, data = Field)
summary(bmi_model)
confint(bmi_model)
# Test correlation between BMI and predicted weight loss
cor_bmi <- cor.test(Field$BMI, Field$predicted_weight_loss,
method = "spearman", use = "complete.obs")
print(cor_bmi)
# Generate model predictions for visualization
bmi_predictions <- ggpredict(bmi_model, terms = c("BMI"))
# Plot model predictions with confidence intervals
bmi_pred_plot <- ggplot(bmi_predictions, aes(x = x, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = "blue") +
labs(
title = "Predicted Weight Loss based on BMI",
x = "Body Mass Index (BMI)",
y = "Predicted Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold")
)
print(bmi_pred_plot)
# Create scatter plot: Body Weight vs Predicted Weight Loss
weight_plot <- ggplot(data = Field, aes(x = Body_Weight, y = predicted_weight_loss)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red", size = 1) +
labs(
title = "Body Weight vs Predicted Weight Loss",
x = "Body Weight (g)",
y = "Predicted Maximum Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
print(weight_plot)
# Fit linear model: Body Weight predicting weight loss
weight_model <- lm(predicted_weight_loss ~ Body_Weight, data = Field)
summary(weight_model)
confint(weight_model)
# Test correlation between body weight and predicted weight loss
cor_weight <- cor.test(Field$Body_Weight, Field$predicted_weight_loss,
method = "spearman", use = "complete.obs")
print(cor_weight)
# Model: How predicted weight loss relates to observed body weight
reverse_weight_model <- lm(Body_Weight ~ predicted_weight_loss, data = Field)
summary(reverse_weight_model)
confint(reverse_weight_model)
# Create scatter plot for reverse relationship
reverse_weight_plot <- ggplot(data = Field, aes(x = predicted_weight_loss, y = Body_Weight)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "darkgreen", size = 1) +
labs(
title = "Predicted Weight Loss vs Observed Body Weight",
x = "Predicted Maximum Weight Loss (%)",
y = "Body Weight (g)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
print(reverse_weight_plot)
# Create summary table of key statistics
validation_summary <- data.frame(
Metric = c("BMI vs Predicted WL", "Body Weight vs Predicted WL", "Predicted WL vs Body Weight"),
Correlation = c(cor_bmi$estimate, cor_weight$estimate,
cor.test(Field$predicted_weight_loss, Field$Body_Weight,
method = "spearman", use = "complete.obs")$estimate),
P_value = c(cor_bmi$p.value, cor_weight$p.value,
cor.test(Field$predicted_weight_loss, Field$Body_Weight,
method = "spearman", use = "complete.obs")$p.value),
R_squared = c(summary(bmi_model)$r.squared,
summary(weight_model)$r.squared,
summary(reverse_weight_model)$r.squared)
)
print("Validation Summary:")
print(validation_summary)
# Save all plots
ggsave(filename = paste0(an_fi, "/BMI_vs_predicted_WL.jpeg"),
plot = bmi_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/BMI_predictions.jpeg"),
plot = bmi_pred_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/body_weight_vs_predicted_WL.jpeg"),
plot = weight_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/predicted_WL_vs_body_weight.jpeg"),
plot = reverse_weight_plot, width = 6, height = 4, dpi = 300)
# Save all plots
ggsave(filename = paste0(an_fi, "/BMI_vs_predicted_WL.pdf"),
plot = bmi_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/BMI_predictions.pdf"),
plot = bmi_pred_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/body_weight_vs_predicted_WL.pdf"),
plot = weight_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/predicted_WL_vs_body_weight.pdf"),
plot = reverse_weight_plot, width = 6, height = 4, dpi = 300)
# Check model assumptions for key models
par(mfrow = c(2, 2))
# BMI model diagnostics
plot(bmi_model, main = "BMI Model Diagnostics")
# Body weight model diagnostics
plot(weight_model, main = "Body Weight Model Diagnostics")
# Reverse model diagnostics
plot(reverse_weight_model, main = "Reverse Weight Model Diagnostics")
par(mfrow = c(1, 1))  # Reset plotting parameters
cat("Analysis complete. Check plots and model summaries for validation results.\n")
ggsave(filename = paste0(an_fi, "/enhanced_weight_validation_v2.jpeg"),
plot = enhanced_weight_plot_v2, width = 8, height = 6, dpi = 300)
# Calculate BMI (Body Mass Index)
Field <- Field %>%
dplyr::mutate(BMI = Body_Weight / (Body_Length / 100)^2)
# Check BMI distribution
shapiro.test(Field$BMI)  # Test for normality
# Create scatter plot: BMI vs Predicted Weight Loss
bmi_plot <- ggplot(data = Field, aes(x = BMI, y = predicted_weight_loss)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "blue", size = 1) +
labs(
title = "Body Mass Index vs Predicted Weight Loss",
x = "Body Mass Index (BMI)",
y = "Predicted Maximum Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
# Display plot
print(bmi_plot)
# Fit linear model: BMI predicting weight loss
bmi_model <- lm(predicted_weight_loss ~ BMI, data = Field)
summary(bmi_model)
confint(bmi_model)
# Test correlation between BMI and predicted weight loss
cor_bmi <- cor.test(Field$BMI, Field$predicted_weight_loss,
method = "spearman", use = "complete.obs")
print(cor_bmi)
# Generate model predictions for visualization
bmi_predictions <- ggpredict(bmi_model, terms = c("BMI"))
# Plot model predictions with confidence intervals
bmi_pred_plot <- ggplot(bmi_predictions, aes(x = x, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = "blue") +
labs(
title = "Predicted Weight Loss based on BMI",
x = "Body Mass Index (BMI)",
y = "Predicted Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold")
)
print(bmi_pred_plot)
# Create scatter plot: Body Weight vs Predicted Weight Loss
weight_plot <- ggplot(data = Field, aes(x = Body_Weight, y = predicted_weight_loss)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red", size = 1) +
labs(
title = "Body Weight vs Predicted Weight Loss",
x = "Body Weight (g)",
y = "Predicted Maximum Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
print(weight_plot)
# Fit linear model: Body Weight predicting weight loss
weight_model <- lm(predicted_weight_loss ~ Body_Weight, data = Field)
summary(weight_model)
confint(weight_model)
# Test correlation between body weight and predicted weight loss
cor_weight <- cor.test(Field$Body_Weight, Field$predicted_weight_loss,
method = "spearman", use = "complete.obs")
print(cor_weight)
# Model: How predicted weight loss relates to observed body weight
reverse_weight_model <- lm(Body_Weight ~ predicted_weight_loss, data = Field)
summary(reverse_weight_model)
confint(reverse_weight_model)
# Create scatter plot for reverse relationship
reverse_weight_plot <- ggplot(data = Field, aes(x = predicted_weight_loss, y = Body_Weight)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "darkgreen", size = 1) +
labs(
title = "Predicted Weight Loss vs Observed Body Weight",
x = "Predicted Maximum Weight Loss (%)",
y = "Body Weight (g)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
print(reverse_weight_plot)
# Create summary table of key statistics
validation_summary <- data.frame(
Metric = c("BMI vs Predicted WL", "Body Weight vs Predicted WL", "Predicted WL vs Body Weight"),
Correlation = c(cor_bmi$estimate, cor_weight$estimate,
cor.test(Field$predicted_weight_loss, Field$Body_Weight,
method = "spearman", use = "complete.obs")$estimate),
P_value = c(cor_bmi$p.value, cor_weight$p.value,
cor.test(Field$predicted_weight_loss, Field$Body_Weight,
method = "spearman", use = "complete.obs")$p.value),
R_squared = c(summary(bmi_model)$r.squared,
summary(weight_model)$r.squared,
summary(reverse_weight_model)$r.squared)
)
print("Validation Summary:")
print(validation_summary)
# Save all plots
ggsave(filename = paste0(an_fi, "/BMI_vs_predicted_WL.jpeg"),
plot = bmi_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/BMI_predictions.jpeg"),
plot = bmi_pred_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/body_weight_vs_predicted_WL.jpeg"),
plot = weight_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/predicted_WL_vs_body_weight.jpeg"),
plot = reverse_weight_plot, width = 6, height = 4, dpi = 300)
# Save all plots
ggsave(filename = paste0(an_fi, "/BMI_vs_predicted_WL.pdf"),
plot = bmi_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/BMI_predictions.pdf"),
plot = bmi_pred_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/body_weight_vs_predicted_WL.pdf"),
plot = weight_plot, width = 6, height = 4, dpi = 300)
ggsave(filename = paste0(an_fi, "/predicted_WL_vs_body_weight.pdf"),
plot = reverse_weight_plot, width = 6, height = 4, dpi = 300)
# Check model assumptions for key models
par(mfrow = c(2, 2))
# BMI model diagnostics
plot(bmi_model, main = "BMI Model Diagnostics")
# Body weight model diagnostics
plot(weight_model, main = "Body Weight Model Diagnostics")
# Reverse model diagnostics
plot(reverse_weight_model, main = "Reverse Weight Model Diagnostics")
par(mfrow = c(1, 1))  # Reset plotting parameters
cat("Analysis complete. Check plots and model summaries for validation results.\n")
ggsave(filename = paste0(an_fi, "/enhanced_weight_validation_v2.jpeg"),
plot = enhanced_weight_plot_v2, width = 8, height = 6, dpi = 300)
# Fit linear model: BMI predicting weight loss
bmi_model <- lm(predicted_weight_loss ~ BMI, data = Field)
summary(bmi_model)
confint(bmi_model)
# Test correlation between BMI and predicted weight loss
cor_bmi <- cor.test(Field$BMI, Field$predicted_weight_loss,
method = "spearman", use = "complete.obs")
print(cor_bmi)
# Generate model predictions for visualization
bmi_predictions <- ggpredict(bmi_model, terms = c("BMI"))
# Plot model predictions with confidence intervals
bmi_pred_plot <- ggplot(bmi_predictions, aes(x = x, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = "blue") +
labs(
title = "Predicted Weight Loss based on BMI",
x = "Body Mass Index (BMI)",
y = "Predicted Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold")
)
print(bmi_pred_plot)
# Create scatter plot: Body Weight vs Predicted Weight Loss
weight_plot <- ggplot(data = Field, aes(x = Body_Weight, y = predicted_weight_loss)) +
geom_point(color = "black", size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red", size = 1) +
labs(
title = "Body Weight vs Predicted Weight Loss",
x = "Body Weight (g)",
y = "Predicted Maximum Weight Loss (%)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
print(weight_plot)
# Fit linear model: Body Weight predicting weight loss
weight_model <- lm(predicted_weight_loss ~ Body_Weight, data = Field)
summary(weight_model)
confint(weight_model)
