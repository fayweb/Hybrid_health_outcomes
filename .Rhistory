cat("  Kurtosis: ", round(kurtosis_val, 3), "\n")
cat("  Zeros: ", zeros, " (", round(zero_prop * 100, 1), "%)\n")
# Assess normality
normality_issues <- character(0)
if (abs(skewness_val) > 1) {
normality_issues <- c(normality_issues, "high skewness")
}
if (abs(kurtosis_val) > 1) {
normality_issues <- c(normality_issues, "high kurtosis")
}
if (abs(mean_val - median_val) > sd_val * 0.5) {
normality_issues <- c(normality_issues, "mean-median difference")
}
if (zero_prop > 0.1) {
normality_issues <- c(normality_issues, "too many zeros")
}
use_spearman <- length(normality_issues) > 0
if (use_spearman) {
cat("  ‚ö†Ô∏è  NORMALITY CONCERNS: ", paste(normality_issues, collapse = ", "), "\n")
cat("  üìä RECOMMENDATION: Use Spearman correlation\n")
} else {
cat("  ‚úÖ APPEARS NORMAL: Pearson correlation could be appropriate\n")
}
return(list(
use_spearman = use_spearman,
reason = paste(normality_issues, collapse = ", "),
skewness = skewness_val,
kurtosis = kurtosis_val,
n = n
))
}
# Test distributions of key variables
cat("Testing distributions to justify correlation method choice...\n")
# Delta Ct distribution
delta_ct_dist <- test_distribution(Field$delta_ct_cewe_MminusE, "Delta Ct (qPCR intensity)")
# OPG distribution
opg_dist <- test_distribution(Field$OPG[Field$OPG > 0], "Oocyst counts (OPG > 0)")
# Predicted weight loss distribution
pwl_dist <- test_distribution(Field$predicted_weight_loss, "Predicted weight loss")
# Summary recommendation
cat("\nüìä CORRELATION METHOD JUSTIFICATION:\n")
if (delta_ct_dist$use_spearman || opg_dist$use_spearman) {
cat("Using Spearman correlations due to non-normal distributions in intensity measures.\n")
correlation_method <- "spearman"
} else {
cat("Data appear sufficiently normal for Pearson correlations.\n")
correlation_method <- "pearson"
}
# ============================================================================
# MODEL 1: INFECTION STATUS EFFECT
# ============================================================================
cat("\n1. INFECTION STATUS MODEL\n")
cat(strrep("-", 30), "\n")
# Filter data
Field_status <- Field %>%
filter(!is.na(infection_status) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_status), "mice\n")
cat("Group sizes:\n")
print(table(Field_status$infection_status))
# Run model
status_model <- lm(predicted_weight_loss ~ infection_status, data = Field_status)
status_results <- broom::tidy(status_model)
status_summary <- summary(status_model)
cat("\nModel results:\n")
print(status_results)
cat("Model R¬≤:", round(status_summary$r.squared, 4), "\n")
# Extract key statistics
status_effect <- status_results$estimate[2]
status_se <- status_results$std.error[2]
status_p <- status_results$p.value[2]
status_r2 <- status_summary$r.squared
status_f_p <- pf(status_summary$fstatistic[1],
status_summary$fstatistic[2],
status_summary$fstatistic[3],
lower.tail = FALSE)
# Plot the summary with enhanced aesthetics
plot_summs(status_model,
scale = TRUE,
robust = TRUE,
inner_ci_level = 0.95,
outer_ci_level = 0.99,
coefs = c("Infected with Eimeria spp." = "infection_statusTRUE",
"Infection intensity with Eimeria spp." =
"infection_statusTRUE:delta_ct_cewe_MminusE")) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
plot.title = element_text(size = 16, hjust = 0.5, face = "bold")
) +
labs(
x = "Estimate",
y = "Predictor"
) +
scale_color_manual(values = c("4ACAFF", "EBEBEB")) +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey") -> int_MC
int_MC
# Filter data for interaction model
Field_interaction <- Field %>%
filter(!is.na(delta_ct_cewe_MminusE) & !is.na(infection_status) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_interaction), "mice\n")
cat("Group sizes:\n")
print(table(Field_interaction$MC.Eimeria))
# Run interaction model
interaction_model <- lm(predicted_weight_loss ~ delta_ct_cewe_MminusE * MC.Eimeria,
data = Field_interaction)
# Run interaction model
interaction_model <- lm(predicted_weight_loss ~ delta_ct_cewe_MminusE * infection_status,
data = Field_interaction)
interaction_results <- broom::tidy(interaction_model)
interaction_summary <- summary(interaction_model)
cat("\nInteraction Model results:\n")
print(interaction_results)
# Filter data for interaction model
Field_interaction <- Field %>%
filter(!is.na(delta_ct_cewe_MminusE) & !is.na(MC.Eimeria) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_interaction), "mice\n")
cat("Group sizes:\n")
print(table(Field_interaction$MC.Eimeria))
# Run interaction model
interaction_model <- lm(predicted_weight_loss ~ delta_ct_cewe_MminusE * MC.Eimeria,
data = Field_interaction)
interaction_results <- broom::tidy(interaction_model)
interaction_summary <- summary(interaction_model)
cat("\nInteraction Model results:\n")
print(interaction_results)
cat("Model R¬≤:", round(interaction_summary$r.squared, 4), "\n")
cat("Model F-test p-value:", format(pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE), scientific = TRUE), "\n")
# Extract interaction statistics
interaction_term <- interaction_results[grep(":", interaction_results$term), ]
if (nrow(interaction_term) > 0) {
interaction_effect <- interaction_term$estimate[1]
interaction_se <- interaction_term$std.error[1]
interaction_p <- interaction_term$p.value[1]
} else {
interaction_effect <- NA
interaction_se <- NA
interaction_p <- NA
}
infection_main_effect <- interaction_results$estimate[grep("MC.Eimeria", interaction_results$term)[1]]
infection_main_se <- interaction_results$std.error[grep("MC.Eimeria", interaction_results$term)[1]]
infection_main_p <- interaction_results$p.value[grep("MC.Eimeria", interaction_results$term)[1]]
interaction_r2 <- interaction_summary$r.squared
interaction_f_p <- pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE)
# Plot the summary with enhanced aesthetics
plot_summs(interaction_model,
scale = TRUE,
robust = TRUE,
inner_ci_level = 0.95,
outer_ci_level = 0.99,
coefs = c("Infected with Eimeria spp." = "infection_statusTRUE",
"Infection intensity with Eimeria spp." =
"infection_statusTRUE:delta_ct_cewe_MminusE")) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
plot.title = element_text(size = 16, hjust = 0.5, face = "bold")
) +
labs(
x = "Estimate",
y = "Predictor"
) +
scale_color_manual(values = c("4ACAFF", "EBEBEB")) +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey") -> int_MC
# Filter data for interaction model
Field_interaction <- Field %>%
filter(!is.na(delta_ct_cewe_MminusE) & !is.na(infection_status) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_interaction), "mice\n")
cat("Group sizes:\n")
print(table(Field_interaction$MC.Eimeria))
# Run interaction model
interaction_model <- lm(predicted_weight_loss ~ delta_ct_cewe_MminusE * infection_status,
data = Field_interaction)
interaction_results <- broom::tidy(interaction_model)
interaction_summary <- summary(interaction_model)
cat("\nInteraction Model results:\n")
print(interaction_results)
cat("Model R¬≤:", round(interaction_summary$r.squared, 4), "\n")
cat("Model F-test p-value:", format(pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE), scientific = TRUE), "\n")
# Extract interaction statistics
interaction_term <- interaction_results[grep(":", interaction_results$term), ]
if (nrow(interaction_term) > 0) {
interaction_effect <- interaction_term$estimate[1]
interaction_se <- interaction_term$std.error[1]
interaction_p <- interaction_term$p.value[1]
} else {
interaction_effect <- NA
interaction_se <- NA
interaction_p <- NA
}
infection_main_effect <- interaction_results$estimate[grep("MC.Eimeria", interaction_results$term)[1]]
infection_main_se <- interaction_results$std.error[grep("MC.Eimeria", interaction_results$term)[1]]
infection_main_p <- interaction_results$p.value[grep("MC.Eimeria", interaction_results$term)[1]]
interaction_r2 <- interaction_summary$r.squared
interaction_f_p <- pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE)
# Plot the summary with enhanced aesthetics
plot_summs(interaction_model,
scale = TRUE,
robust = TRUE,
inner_ci_level = 0.95,
outer_ci_level = 0.99,
coefs = c("Infected with Eimeria spp." = "infection_statusTRUE",
"Infection intensity with Eimeria spp." =
"infection_statusTRUE:delta_ct_cewe_MminusE")) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
plot.title = element_text(size = 16, hjust = 0.5, face = "bold")
) +
labs(
x = "Estimate",
y = "Predictor"
) +
scale_color_manual(values = c("4ACAFF", "EBEBEB")) +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey") -> int_MC
int_MC
# ============================================================================
# MODEL 3: INFECTION INTENSITY INTERACTION MODEL
# ============================================================================
cat("\n3. INFECTION INTENSITY INTERACTION MODEL\n")
cat(strrep("-", 30), "\n")
# Filter data for interaction model - CONSISTENT VARIABLE NAMES
Field_interaction <- Field %>%
filter(!is.na(delta_ct_cewe_MminusE) & !is.na(infection_status) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_interaction), "mice\n")
cat("Group sizes:\n")
print(table(Field_interaction$infection_status))  # FIXED: Use infection_status
# Run interaction model
interaction_model <- lm(predicted_weight_loss ~ delta_ct_cewe_MminusE * infection_status,
data = Field_interaction)
interaction_results <- broom::tidy(interaction_model)
interaction_summary <- summary(interaction_model)
cat("\nInteraction Model results:\n")
print(interaction_results)
cat("Model R¬≤:", round(interaction_summary$r.squared, 4), "\n")
cat("Model F-test p-value:", format(pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE), scientific = TRUE), "\n")
# Extract interaction statistics - FIXED COEFFICIENT NAMES
interaction_term <- interaction_results[grep(":", interaction_results$term), ]
if (nrow(interaction_term) > 0) {
interaction_effect <- interaction_term$estimate[1]
interaction_se <- interaction_term$std.error[1]
interaction_p <- interaction_term$p.value[1]
} else {
interaction_effect <- NA
interaction_se <- NA
interaction_p <- NA
}
# FIXED: Look for infection_statusTRUE instead of MC.Eimeria
infection_main_effect <- interaction_results$estimate[grep("infection_statusTRUE", interaction_results$term)[1]]
infection_main_se <- interaction_results$std.error[grep("infection_statusTRUE", interaction_results$term)[1]]
infection_main_p <- interaction_results$p.value[grep("infection_statusTRUE", interaction_results$term)[1]]
interaction_r2 <- interaction_summary$r.squared
interaction_f_p <- pf(interaction_summary$fstatistic[1],
interaction_summary$fstatistic[2],
interaction_summary$fstatistic[3],
lower.tail = FALSE)
# FIXED: Updated coefficient names for plot_summs
plot_summs(interaction_model,
scale = TRUE,
robust = TRUE,
inner_ci_level = 0.95,
outer_ci_level = 0.99,
coefs = c("Infected with Eimeria spp." = "infection_statusTRUE",
"Infection intensity with Eimeria spp." =
"delta_ct_cewe_MminusE:infection_statusTRUE")) +  # FIXED INTERACTION TERM NAME
theme_minimal() +
theme(
text = element_text(size = 12),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
plot.title = element_text(size = 16, hjust = 0.5, face = "bold")
) +
labs(
x = "Estimate",
y = "Predictor"
) +
scale_color_manual(values = c("#4ACAFF", "#EBEBEB")) +  # FIXED: Added # for hex colors
geom_vline(xintercept = 0, linetype = "dashed", color = "grey") -> int_MC
int_MC
int_MC
ggsave(paste0(an_fi, "/intensity_melting_curve.pdf"), int_MC)
ggsave(paste0(an_fi, "/intensity_melting_curve.pdf"), int_MC, dpi = 300)
ggsave(paste0(an_fi, "/intensity_melting_curve.jpeg"), int_MC, dpi = 300)
# ============================================================================
# CREATE SPECIES PREDICTION PLOT
# ============================================================================
cat("Creating species prediction plot...\n")
# ============================================================================
# MODEL 2: SPECIES-SPECIFIC EFFECTS
# ============================================================================
cat("\n2. SPECIES-SPECIFIC MODEL\n")
cat(strrep("-", 30), "\n")
# Filter data
Field_species <- Field %>%
filter(!is.na(species_Eimeria) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_species), "mice\n")
cat("Group sizes:\n")
print(table(Field_species$species_Eimeria))
# Run model
species_model <- lm(predicted_weight_loss ~ species_Eimeria, data = Field_species)
species_results <- broom::tidy(species_model)
species_summary <- summary(species_model)
cat("\nModel results:\n")
print(species_results)
cat("Model R¬≤:", round(species_summary$r.squared, 4), "\n")
# Extract key statistics
ferrisi_effect <- species_results$estimate[grep("ferrisi", species_results$term)]
ferrisi_se <- species_results$std.error[grep("ferrisi", species_results$term)]
ferrisi_p <- species_results$p.value[grep("ferrisi", species_results$term)]
falciformis_effect <- species_results$estimate[grep("falciformis", species_results$term)]
falciformis_se <- species_results$std.error[grep("falciformis", species_results$term)]
falciformis_p <- species_results$p.value[grep("falciformis", species_results$term)]
species_r2 <- species_summary$r.squared
species_f_p <- pf(species_summary$fstatistic[1],
species_summary$fstatistic[2],
species_summary$fstatistic[3],
lower.tail = FALSE)
# ============================================================================
# CREATE SPECIES PREDICTION PLOT
# ============================================================================
cat("Creating species prediction plot...\n")
# ============================================================================
# CREATE SPECIES PREDICTION PLOT
# ============================================================================
cat("Creating species prediction plot...\n")
# Create predicted values using ggpredict
species_preds <- ggpredict(species_model, terms = "species_Eimeria")
# Create the plot
species_plot <- ggplot(species_preds, aes(x = x, y = predicted, color = x)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1, linewidth = 0.7) +
scale_color_manual(values = color_mapping_species) +
labs(
x = "*Eimeria* spp. subspecies",
y = "Predicted Weight Loss",
color = "Species"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13),
axis.text.x = element_markdown(),
axis.title.x = element_markdown(),
legend.text = element_markdown()
)
# Display the plot
print(species_plot)
# Create the plot
species_plot <- ggplot(species_preds, aes(x = x, y = predicted, color = x)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1, linewidth = 0.7) +
scale_color_manual(values = color_mapping_f) +
labs(
x = "*Eimeria* spp. subspecies",
y = "Predicted Weight Loss",
color = "Species"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13),
axis.text.x = element_markdown(),
axis.title.x = element_markdown(),
legend.text = element_markdown()
)
# Display the plot
print(species_plot)
# Save the plot
ggsave(
plot = species_plot,
filename = paste0(an_fi, "/predicted_weight_loss_species.pdf"),
width = 8,
height = 6,
dpi = 300
)
# Save the plot
ggsave(
plot = species_plot,
filename = paste0(an_fi, "/predicted_weight_loss_species.jpeg"),
width = 8,
height = 6,
dpi = 300
)
cat("Species prediction plot saved to:", paste0(an_fi, "/predicted_weight_loss_species.pdf"), "\n")
# ============================================================================
# MODEL 1: INFECTION STATUS EFFECT
# ============================================================================
cat("\n1. INFECTION STATUS MODEL\n")
cat(strrep("-", 30), "\n")
# Filter data
Field_status <- Field %>%
filter(!is.na(infection_status) & !is.na(predicted_weight_loss))
cat("Sample size:", nrow(Field_status), "mice\n")
cat("Group sizes:\n")
print(table(Field_status$infection_status))
# Run model
status_model <- lm(predicted_weight_loss ~ infection_status, data = Field_status)
status_results <- broom::tidy(status_model)
status_summary <- summary(status_model)
cat("\nModel results:\n")
print(status_results)
cat("Model R¬≤:", round(status_summary$r.squared, 4), "\n")
# Extract key statistics
status_effect <- status_results$estimate[2]
status_se <- status_results$std.error[2]
status_p <- status_results$p.value[2]
status_r2 <- status_summary$r.squared
status_f_p <- pf(status_summary$fstatistic[1],
status_summary$fstatistic[2],
status_summary$fstatistic[3],
lower.tail = FALSE)
# ============================================================================
# CREATE RAINCLOUD PLOT FOR INFECTION STATUS
# ============================================================================
cat("Creating raincloud plot for infection status...\n")
# Define colors for infection status
infection_colors <- c("Infected with Eimeria spp." = "#FF0028", "Uninfected" = "#4ACAFF")
# Prepare data for raincloud plot - create clean labels
Field_raincloud <- Field_status %>%
mutate(
infection_label = case_when(
infection_status == TRUE ~ "Infected with Eimeria spp.",
infection_status == FALSE ~ "Uninfected",
TRUE ~ as.character(infection_status)
)
) %>%
drop_na(infection_label, predicted_weight_loss)
# Create raincloud plot
raincloud_plot <- Field_raincloud %>%
ggplot(aes(y = infection_label, x = predicted_weight_loss, fill = infection_label)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
alpha = 0.7,
.width = 0,
justification = -0.2,
point_colour = NA
) +
scale_fill_manual(values = infection_colors) +
geom_boxplot(
width = 0.15,
outlier.shape = NA
) +
ggdist::stat_dots(
side = "left",
justification = 1.1,
binwidth = 0.25,
alpha = 0.5
) +
geom_point(
shape = 95,
size = 15,
alpha = 0.2,
color = "gray50",
position = position_dodge(width = 0.75)
) +
theme_minimal() +
labs(
y = "Infection status with *Eimeria* spp.",
x = "Predicted weight loss",
fill = "Infection status"
) +
theme(
legend.position = "none",
axis.title.y = element_markdown(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
# Display the plot
print(raincloud_plot)
# Save the plot
ggsave(
plot = raincloud_plot,
filename = paste0(an_fi, "/raincloud_infection_status.pdf"),
width = 6,
height = 4,
dpi = 300
)
source("~/GitHub/Hybrid_health_outcomes/code/analysis/wild_mice/validate_infection_intensity.R", echo = TRUE)
source("~/GitHub/Hybrid_health_outcomes/code/analysis/wild_mice/validate_infection_intensity.R", echo = TRUE)
