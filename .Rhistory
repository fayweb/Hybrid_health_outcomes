ylim(0, max(species_data$n) * 1.15)
return(p4)
}
create_intensity_plots <- function(field) {
# Delta Ct distribution by species
delta_ct_data <- field %>%
filter(has_tissue_qPCR & species_clean %in% c("E. ferrisi", "E. falciformis", "Uninfected"))
p5a <- ggplot(delta_ct_data, aes(x = species_clean, y = delta_ct_cewe_MminusE, fill = species_clean)) +
geom_boxplot(alpha = 0.7, outlier.alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5) +
labs(title = "Infection Intensity by Species (ΔCt)",
subtitle = "Lower ΔCt = Higher infection intensity",
x = "Species", y = "ΔCt (Mouse - Eimeria)") +
scale_fill_manual(values = c("Uninfected" = "#4575b4", "E. ferrisi" = "#fee08b",
"E. falciformis" = "#d73027")) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# OPG distribution (log scale)
opg_data <- field %>%
filter(has_oocyst & OPG > 0 & species_clean %in% c("E. ferrisi", "E. falciformis"))
if(nrow(opg_data) > 0) {
p5b <- ggplot(opg_data, aes(x = species_clean, y = log10(OPG), fill = species_clean)) +
geom_boxplot(alpha = 0.7, outlier.alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5) +
labs(title = "Oocyst Shedding by Species",
subtitle = "Log10 transformed OPG values",
x = "Species", y = "Log10(OPG)") +
scale_fill_manual(values = c("E. ferrisi" = "#fee08b", "E. falciformis" = "#d73027")) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
} else {
p5b <- ggplot() +
annotate("text", x = 1, y = 1, label = "No OPG data\navailable", size = 6) +
theme_void() +
labs(title = "Oocyst Shedding by Species", subtitle = "No data available")
}
return(list(delta_ct = p5a, opg = p5b))
}
create_method_correlation <- function(field) {
# Compare qPCR vs OPG in mice with both
correlation_data <- field %>%
filter(has_tissue_qPCR & has_oocyst & !is.na(delta_ct_cewe_MminusE) & !is.na(OPG)) %>%
filter(OPG > 0)  # Only mice with detectable oocysts
if(nrow(correlation_data) > 5) {
correlation_coef <- cor(correlation_data$delta_ct_cewe_MminusE,
log10(correlation_data$OPG),
use = "complete.obs")
p6 <- ggplot(correlation_data, aes(x = delta_ct_cewe_MminusE, y = log10(OPG))) +
geom_point(alpha = 0.6, size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "qPCR vs Oocyst Shedding Correlation",
subtitle = paste0("Pearson r = ", round(correlation_coef, 3),
" (n = ", nrow(correlation_data), " mice)"),
x = "ΔCt (Mouse - Eimeria)", y = "Log10(OPG)") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"))
} else {
p6 <- ggplot() +
annotate("text", x = 1, y = 1, label = "Insufficient data\nfor correlation", size = 6) +
theme_void() +
labs(title = "qPCR vs Oocyst Correlation", subtitle = "Insufficient data")
}
return(p6)
}
create_method_combinations <- function(field) {
# Get top method combinations
method_combos <- table(field$method_combo) %>%
sort(decreasing = TRUE) %>%
head(8)  # Top 8 combinations
combo_data <- data.frame(
combo = names(method_combos),
count = as.numeric(method_combos)
) %>%
mutate(
percentage = round(count / nrow(field) * 100, 1),
combo_clean = case_when(
combo == "TFI" ~ "Tissue + Feces qPCR\n+ Immune",
combo == "OASI" ~ "Oocyst + Amplicon + Species\n+ Immune",
combo == "TFOSI" ~ "All methods\nexcept Amplicon",
combo == "TI" ~ "Tissue qPCR\n+ Immune only",
combo == "OI" ~ "Oocyst\n+ Immune only",
combo == "TOSI" ~ "Tissue + Oocyst + Species\n+ Immune",
combo == "TFOASI" ~ "All methods\ncomplete",
combo == "FI" ~ "Feces qPCR\n+ Immune only",
TRUE ~ combo
)
)
p7 <- ggplot(combo_data, aes(x = reorder(combo_clean, count), y = count)) +
geom_col(fill = "darkorange", alpha = 0.8) +
geom_text(aes(label = paste0(count, "\n(", percentage, "%)")),
hjust = -0.1, size = 3) +
coord_flip() +
labs(title = "Top Method Combinations",
subtitle = "T=Tissue qPCR, F=Feces qPCR, O=Oocyst, A=Amplicon, S=Species, I=Immune",
x = "Method Combination", y = "Number of Mice") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"))
return(p7)
}
create_field_overview_plots <- function(field) {
# Create individual plots
p1 <- create_sample_flowchart(field)
p2 <- create_method_heatmap(field)
p3 <- create_infection_breakdown(field)
p4 <- create_species_distribution(field)
intensity_plots <- create_intensity_plots(field)
p6 <- create_method_correlation(field)
p7 <- create_method_combinations(field)
# Combine plots in a publication-ready layout
layout <- "
AABBCC
DDEEFF
"
combined_plot <- p1 + p2 + p3 + p4 + intensity_plots$delta_ct + p6 +
plot_layout(design = layout) +
plot_annotation(
title = "Field Data Analysis Overview: Wild Mouse Eimeria Infections",
subtitle = paste0("336 mice with immune gene expression data from Brandenburg, Germany (2016-2019)\n",
"Overall infection rate: ",
round(sum(field$infection_status == "TRUE", na.rm = TRUE) /
sum(field$infection_status %in% c("TRUE", "FALSE")) * 100, 1),
"% based on multiple detection methods"),
caption = "Data integrated from qPCR, amplicon sequencing, and oocyst counting",
theme = theme(plot.title = element_text(size = 16, face = "bold"))
)
return(list(
combined = combined_plot,
flowchart = p1,
method_availability = p2,
infection_status = p3,
species_distribution = p4,
delta_ct_intensity = intensity_plots$delta_ct,
opg_intensity = intensity_plots$opg,
method_correlation = p6,
method_combinations = p7
))
}
print_field_summary <- function(field) {
cat("=== FIELD DATA SUMMARY ===\n")
cat("Total mice:", nrow(field), "\n")
cat("Infection rate:", round(sum(field$infection_status == "TRUE", na.rm = TRUE) /
sum(field$infection_status %in% c("TRUE", "FALSE")) * 100, 1), "%\n")
cat("Species breakdown:\n")
print(table(field$species_clean, useNA = "ifany"))
cat("\nMethod availability:\n")
cat("- Tissue qPCR:", sum(field$has_tissue_qPCR), "mice\n")
cat("- Amplicon sequencing:", sum(field$has_amplicon), "mice\n")
cat("- Oocyst counting:", sum(field$has_oocyst), "mice\n")
cat("- Complete data:", sum(field$has_tissue_qPCR & field$has_oocyst & field$has_amplicon), "mice\n")
}
p1
# First, let's check what we have in your field data
cat("=== DEBUGGING FIELD DATA ===\n")
cat("Field data dimensions:", dim(field), "\n")
cat("Field data class:", class(field), "\n")
cat("Column names in field data:\n")
print(colnames(field))
# Check if the required columns exist
required_cols <- c("has_immune_data", "infection_status", "species_clean",
"has_tissue_qPCR", "has_feces_qPCR", "has_oocyst",
"has_amplicon", "has_species", "method_combo")
cat("\n=== CHECKING REQUIRED COLUMNS ===\n")
for(col in required_cols) {
if(col %in% colnames(field)) {
cat("✓", col, "- EXISTS\n")
} else {
cat("✗", col, "- MISSING\n")
}
}
# Test each plotting function individually
cat("\n=== TESTING INDIVIDUAL FUNCTIONS ===\n")
# =============================================================================
# 1. TEST SAMPLE FLOWCHART
# =============================================================================
cat("\n1. Testing sample flowchart...\n")
tryCatch({
flowchart_data <- data.frame(
step = factor(c("Total Field\nMice", "With Immune\nData", "Known Infection\nStatus",
"Species\nClassified", "Intensity\nData", "Complete\nData"),
levels = c("Total Field\nMice", "With Immune\nData", "Known Infection\nStatus",
"Species\nClassified", "Intensity\nData", "Complete\nData")),
n = c(
nrow(field),
sum(field$has_immune_data, na.rm = TRUE),
sum(field$infection_status %in% c("TRUE", "FALSE"), na.rm = TRUE),
sum(field$species_clean %in% c("E. ferrisi", "E. falciformis", "Uninfected"), na.rm = TRUE),
sum(field$has_tissue_qPCR & field$infection_status == "TRUE", na.rm = TRUE),
sum(field$has_tissue_qPCR & field$has_oocyst & field$has_amplicon, na.rm = TRUE)
)
)
print(flowchart_data)
cat("✓ Flowchart data created successfully\n")
}, error = function(e) {
cat("✗ Error in flowchart:", e$message, "\n")
})
# =============================================================================
# 2. TEST METHOD AVAILABILITY
# =============================================================================
cat("\n2. Testing method availability...\n")
tryCatch({
method_summary <- data.frame(
Method = c("Immune Genes", "Tissue qPCR", "Feces qPCR", "Oocyst Count", "Amplicon Seq", "Species ID"),
Count = c(
sum(field$has_immune_data, na.rm = TRUE),
sum(field$has_tissue_qPCR, na.rm = TRUE),
sum(field$has_feces_qPCR, na.rm = TRUE),
sum(field$has_oocyst, na.rm = TRUE),
sum(field$has_amplicon, na.rm = TRUE),
sum(field$has_species, na.rm = TRUE)
)
)
print(method_summary)
cat("✓ Method availability data created successfully\n")
}, error = function(e) {
cat("✗ Error in method availability:", e$message, "\n")
})
# =============================================================================
# 3. TEST INFECTION STATUS
# =============================================================================
cat("\n3. Testing infection status...\n")
tryCatch({
status_summary <- table(field$infection_status, useNA = "always")
print(status_summary)
cat("✓ Infection status data created successfully\n")
}, error = function(e) {
cat("✗ Error in infection status:", e$message, "\n")
})
# =============================================================================
# 4. TEST SPECIES DATA
# =============================================================================
cat("\n4. Testing species data...\n")
tryCatch({
species_summary <- table(field$species_clean, useNA = "always")
print(species_summary)
cat("✓ Species data created successfully\n")
}, error = function(e) {
cat("✗ Error in species data:", e$message, "\n")
})
# =============================================================================
# 5. SIMPLE WORKING PLOT FUNCTION
# =============================================================================
cat("\n=== CREATING SIMPLE WORKING PLOTS ===\n")
# Simple flowchart that should work
create_simple_flowchart <- function(field) {
library(ggplot2)
# Simple data
plot_data <- data.frame(
stage = c("Total", "Immune Data", "Known Status", "Species ID"),
count = c(
nrow(field),
336,  # All have immune data
sum(field$infection_status %in% c("TRUE", "FALSE"), na.rm = TRUE),
sum(field$species_clean %in% c("E. ferrisi", "E. falciformis", "Uninfected"), na.rm = TRUE)
)
)
p <- ggplot(plot_data, aes(x = factor(stage, levels = stage), y = count)) +
geom_col(fill = "steelblue", alpha = 0.8) +
geom_text(aes(label = count), vjust = -0.5, size = 4) +
labs(title = "Field Data Sample Sizes",
x = "Analysis Stage", y = "Number of Mice") +
theme_minimal()
return(p)
}
# Simple infection breakdown
create_simple_infection_plot <- function(field) {
library(ggplot2)
# Get infection data
infection_data <- field %>%
filter(infection_status %in% c("TRUE", "FALSE")) %>%
count(infection_status) %>%
mutate(percentage = round(n / sum(n) * 100, 1))
p <- ggplot(infection_data, aes(x = infection_status, y = n, fill = infection_status)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = paste0(n, "\n(", percentage, "%)")), vjust = -0.5) +
labs(title = "Infection Status Distribution",
x = "Infection Status", y = "Number of Mice") +
scale_fill_manual(values = c("TRUE" = "#d73027", "FALSE" = "#4575b4")) +
theme_minimal() +
theme(legend.position = "none")
return(p)
}
# Test the simple functions
cat("\n6. Testing simple flowchart...\n")
tryCatch({
p1 <- create_simple_flowchart(field)
cat("✓ Simple flowchart created successfully\n")
print("You can view it with: p1")
}, error = function(e) {
cat("✗ Error in simple flowchart:", e$message, "\n")
})
cat("\n7. Testing simple infection plot...\n")
tryCatch({
p2 <- create_simple_infection_plot(field)
cat("✓ Simple infection plot created successfully\n")
print("You can view it with: p2")
}, error = function(e) {
cat("✗ Error in simple infection plot:", e$message, "\n")
})
# =============================================================================
# 6. INSTRUCTIONS FOR NEXT STEPS
# =============================================================================
cat("\n=== NEXT STEPS ===\n")
cat("If the simple plots work, try:\n")
cat("1. p1  # to view the flowchart\n")
cat("2. p2  # to view the infection breakdown\n")
cat("3. ggsave('flowchart.png', p1, width = 10, height = 6)\n")
cat("4. ggsave('infection_status.png', p2, width = 8, height = 6)\n")
cat("\nIf there are still errors, please show me:\n")
cat("1. str(field)  # to see the structure of your data\n")
cat("2. head(field, 3)  # to see the first few rows\n")
# View the plots that were created
p1  # Sample size flowchart
p2  # Infection status breakdown
# Save them
ggsave('flowchart.png', p1, width = 10, height = 6)
ggsave('infection_status.png', p2, width = 8, height = 6)
library(ggplot2)
library(dplyr)
library(patchwork)
create_detailed_flowchart <- function(field) {
flowchart_data <- data.frame(
step = factor(c("Total Field\nMice", "With Immune\nData", "Known Infection\nStatus",
"Species\nClassified", "Intensity\nData", "Complete\nData"),
levels = c("Total Field\nMice", "With Immune\nData", "Known Infection\nStatus",
"Species\nClassified", "Intensity\nData", "Complete\nData")),
n = c(336, 336, 305, 169, 92, 14)  # Your exact numbers
)
p <- ggplot(flowchart_data, aes(x = step, y = n)) +
geom_col(fill = "steelblue", alpha = 0.8, width = 0.7) +
geom_text(aes(label = n), vjust = -0.5, size = 4, fontface = "bold") +
labs(title = "Sample Size Progression Through Analysis Pipeline",
subtitle = "From field collection to analysis-ready datasets",
x = "Analysis Stage", y = "Number of Mice") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(size = 14, face = "bold"),
panel.grid.major.x = element_blank()
) +
ylim(0, 350)
return(p)
}
create_method_availability <- function(field) {
method_data <- data.frame(
Method = c("Immune Genes", "Tissue qPCR", "Feces qPCR", "Oocyst Count", "Amplicon Seq", "Species ID"),
Count = c(336, 185, 156, 179, 134, 169),  # Your exact numbers
Percentage = round(c(336, 185, 156, 179, 134, 169) / 336 * 100, 1)
) %>%
mutate(Method = factor(Method, levels = rev(Method)))  # Reverse for nice display
p <- ggplot(method_data, aes(x = Method, y = Count)) +
geom_col(fill = "forestgreen", alpha = 0.8) +
geom_text(aes(label = paste0(Count, "\n(", Percentage, "%)")),
hjust = -0.1, size = 3.5) +
coord_flip() +
labs(title = "Data Availability by Quantification Method",
subtitle = "Number and percentage of mice with each data type",
x = "Quantification Method", y = "Number of Mice") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold")) +
ylim(0, 360)
return(p)
}
create_infection_pie <- function(field) {
status_data <- data.frame(
status = c("Infected", "Uninfected"),
n = c(133, 172),  # Your exact numbers
percentage = c(43.6, 56.4)
) %>%
mutate(label = paste0(status, "\n", n, " mice\n(", percentage, "%)"))
p <- ggplot(status_data, aes(x = "", y = n, fill = status)) +
geom_col(color = "white", size = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 4) +
labs(title = "Infection Status Distribution",
subtitle = "Based on 305 mice with known status") +
scale_fill_manual(values = c("Infected" = "#d73027", "Uninfected" = "#4575b4")) +
theme_void() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
)
return(p)
}
create_species_bar <- function(field) {
species_data <- data.frame(
species = c("Uninfected", "E. ferrisi", "E. falciformis"),
n = c(110, 45, 14),  # Your exact numbers
percentage = round(c(110, 45, 14) / 169 * 100, 1)
) %>%
mutate(species = factor(species, levels = species))
p <- ggplot(species_data, aes(x = species, y = n, fill = species)) +
geom_col(alpha = 0.8, width = 0.7) +
geom_text(aes(label = paste0(n, "\n(", percentage, "%)")),
vjust = -0.5, size = 4) +
labs(title = "Eimeria Species Distribution",
subtitle = "Based on 169 mice with species classification",
x = "Species", y = "Number of Mice") +
scale_fill_manual(values = c("Uninfected" = "#4575b4", "E. ferrisi" = "#fee08b",
"E. falciformis" = "#d73027")) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 14, face = "bold"),
panel.grid.major.x = element_blank()
) +
ylim(0, 120)
return(p)
}
create_intensity_boxplot <- function(field) {
# Filter for mice with both species ID and qPCR data
intensity_data <- field %>%
filter(has_tissue_qPCR & species_clean %in% c("E. ferrisi", "E. falciformis", "Uninfected")) %>%
filter(!is.na(delta_ct_cewe_MminusE))
p <- ggplot(intensity_data, aes(x = species_clean, y = delta_ct_cewe_MminusE, fill = species_clean)) +
geom_boxplot(alpha = 0.7, outlier.alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5) +
labs(title = "Infection Intensity by Species (ΔCt)",
subtitle = "Lower ΔCt = Higher infection intensity",
x = "Species", y = "ΔCt (Mouse - Eimeria)") +
scale_fill_manual(values = c("Uninfected" = "#4575b4", "E. ferrisi" = "#fee08b",
"E. falciformis" = "#d73027")) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
return(p)
}
create_method_combos <- function(field) {
# Your top method combinations
combo_data <- data.frame(
combo = c("TFI", "OASI", "TFOSI", "TI", "OI", "TOSI", "TFOASI", "FI"),
count = c(115, 113, 22, 21, 17, 13, 10, 9),
description = c("Tissue + Feces qPCR\n+ Immune",
"Oocyst + Amplicon + Species\n+ Immune",
"All methods\nexcept Amplicon",
"Tissue qPCR\n+ Immune only",
"Oocyst\n+ Immune only",
"Tissue + Oocyst + Species\n+ Immune",
"All methods\ncomplete",
"Feces qPCR\n+ Immune only")
) %>%
mutate(
percentage = round(count / 336 * 100, 1),
description = factor(description, levels = rev(description))
)
p <- ggplot(combo_data, aes(x = description, y = count)) +
geom_col(fill = "darkorange", alpha = 0.8) +
geom_text(aes(label = paste0(count, "\n(", percentage, "%)")),
hjust = -0.1, size = 3) +
coord_flip() +
labs(title = "Top Method Combinations",
subtitle = "T=Tissue qPCR, F=Feces qPCR, O=Oocyst, A=Amplicon, S=Species, I=Immune",
x = "Method Combination", y = "Number of Mice") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"))
return(p)
}
# Create individual plots
p1_detailed <- create_detailed_flowchart(field)
p2_methods <- create_method_availability(field)
p3_infection <- create_infection_pie(field)
p4_species <- create_species_bar(field)
p5_intensity <- create_intensity_boxplot(field)
p6_combos <- create_method_combos(field)
# Create a comprehensive overview
overview_layout <- "
AABBCC
DDEEFF
"
field_overview <- p1_detailed + p2_methods + p3_infection +
p4_species + p5_intensity + p6_combos +
plot_layout(design = overview_layout) +
plot_annotation(
title = "Field Data Analysis Overview: Wild Mouse Eimeria Infections",
subtitle = "336 mice with immune gene expression data from Brandenburg, Germany (2016-2019)\nOverall infection rate: 43.6% based on multiple detection methods",
caption = "Data integrated from qPCR, amplicon sequencing, and oocyst counting",
theme = theme(plot.title = element_text(size = 16, face = "bold"))
)
cat("=== PLOTS CREATED SUCCESSFULLY ===\n")
cat("Available plots:\n")
cat("- p1_detailed: Sample size flowchart\n")
cat("- p2_methods: Method availability\n")
cat("- p3_infection: Infection status pie chart\n")
cat("- p4_species: Species distribution\n")
cat("- p5_intensity: Infection intensity by species\n")
cat("- p6_combos: Method combinations\n")
cat("- field_overview: Complete overview (all plots combined)\n\n")
cat("To view plots:\n")
cat("field_overview  # Complete overview\n")
cat("p1_detailed     # Individual plots\n\n")
cat("To save plots:\n")
cat("ggsave('field_overview_complete.png', field_overview, width = 18, height = 12, dpi = 300)\n")
cat("ggsave('sample_flowchart.png', p1_detailed, width = 12, height = 8, dpi = 300)\n")
cat("ggsave('infection_status.png', p3_infection, width = 8, height = 8, dpi = 300)\n")
# Summary statistics for your thesis
cat("\n=== SUMMARY FOR THESIS ===\n")
cat("Field validation dataset: 336 mice with immune gene expression\n")
cat("Infection rate: 43.6% (133/305 mice with known status)\n")
cat("Species breakdown: E. ferrisi (45), E. falciformis (14), Uninfected (110)\n")
cat("Quantification methods: Tissue qPCR (185), Amplicon (134), Oocyst (179)\n")
cat("Analysis-ready subsets: Intensity data (92), Complete data (14)\n")
field_overview
