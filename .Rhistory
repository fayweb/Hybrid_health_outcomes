geom_smooth(aes(fill = Parasite_primary),
method = "loess", se = TRUE, alpha = 0.2) +
# Add smooth line with confidence intervals
scale_color_manual(values = color_mapping, labels = labels) + # Apply custom color mapping
scale_fill_manual(values = color_mapping, labels = labels) +
# Ensure fills match colors for confidence intervals
labs(#title = "Oocysts per Gram by Days Post Infection",
x = "Days Post Infection (dpi)",
y = "Oocysts per Gram, primary infections",
color = "Infection group",
fill = "Infection group") + # Adjusted labels for clarity
theme_minimal() +
# Use a minimal theme for a cleaner look
theme(legend.position = "right", # Adjust legend position
plot.title = element_text(hjust = 0.5), # Center the plot title
legend.title.align = 0.5,
legend.text = element_markdown()) -> ooc_primary
ooc_primary
ggsave(filename = paste0(d_fi,"/oocysts_primary.jpeg"), plot = ooc_primary,
width = 8, height = 10, dpi = 1000)
ooc_primary + ooc_challenge + Rwp + Rwc +
m_s + strains_weight +
eimeria_weight_prim + eimeria_weight_chal + plot_layout(ncol = 2)
# Combine the plots
#(ooc_primary | ooc_challenge) / # oocysts
panel_figure <-
(Rwp | Rwc) /
(strains_weight_challenge ) /
(eimeria_weight_challenge) +
#   plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
panel_figure <- panel_figure +
plot_annotation(title = 'Fig. 1',
theme = theme(plot.title = element_text(size = 20,
hjust = 0)))
# Control sizes of each plot within the panel
# This is a generic example. You'll need to adjust the widths,
#heights, and layout design based on your specific needs.
panel_figure <- panel_figure +
plot_layout(heights = c(1, 1, 1),
widths = c(1, 1, 1)) # Adjust according to your layout needs
# Display the panel figure
print(panel_figure)
# Combine the plots
#(ooc_primary | ooc_challenge) / # oocysts
panel_figure <-
(Rwp | Rwc) /
(strains_weight_challenge ) /
(eimeria_weight_challenge) +
#   plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
panel_figure <- panel_figure +
plot_annotation(title = 'Fig. 1',
theme = theme(plot.title = element_text(size = 20,
hjust = 0)))
# Display the panel figure
print(panel_figure)
# Save the panel figure
ggsave(paste0(panels_fi, "/experimental_design_simple.jpeg"),
panel_figure, width = 10, height = 12, dpi = 300)
# Combine the plots
panel_hybr <-
(h_w | map_hybrids) +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
panel_hybr <- panel_hybr +
plot_annotation(title = 'Fig. 7',
theme = theme(plot.title =
element_text(size = 13, hjust = 0)))
# Display the panel figure
print(panel_hybr)
# Save the panel figure
ggsave(paste0(panels_fi, "/hyb_plot_design.jpeg"),
panel_hybr, width = 6, height = 3, dpi = 300)
#########################################################################
Challenge <- Challenge %>%
group_by(Mouse_ID, infection) %>%
mutate(weight_loss = 100 - min(relative_weight))
## statistics primary infection
Challenge %>%
filter(infection == "primary") %>%
group_by(Parasite_primary) %>%
summarise(
MeanWeightLoss = mean(weight_loss),
MinWeightLoss = min(weight_loss),
MaxWeightLoss = max(weight_loss),
N = n()
)
## statistics challenge infection
Challenge %>%
filter(infection == "challenge") %>%
group_by(Parasite_challenge) %>%
summarise(
MeanWeightLoss = mean(weight_loss),
MinWeightLoss = min(weight_loss),
MaxWeightLoss = max(weight_loss),
N = n()
)
## statistics primary infection - getting the N
lab %>%
filter(infection == "primary") %>%
group_by(Parasite_primary) %>%
summarise(
MeanWeightLoss = mean(WL_max),
MinWeightLoss = min(WL_max),
MaxWeightLoss = max(WL_max),
N = n()
)
# - getting the N
lab %>%
filter(infection == "challenge")%>%
group_by(Parasite_challenge) %>%
summarise(
MeanWeightLoss = mean(WL_max),
MinWeightLoss = min(WL_max),
MaxWeightLoss = max(WL_max),
N = n()
)
# mean dpi at peak weight loss falciformis
s <-
Challenge %>%
group_by(Mouse_ID, infection) %>%
filter(infection == "primary", Parasite_primary == "E_falciformis",
relative_weight == min(relative_weight))
mean(s$dpi)
# mean dpi at peak weight loss falciformis - challenge
s <-
Challenge %>%
group_by(Mouse_ID, infection) %>%
filter(infection == "challenge", Parasite_challenge == "E_falciformis",
relative_weight == min(relative_weight))
mean(s$dpi)
# mean dpi at peak weight loss primary ferrisi
s <-
Challenge %>%
group_by(Mouse_ID, infection) %>%
filter(infection == "primary", Parasite_primary == "E_ferrisi",
relative_weight == min(relative_weight))
mean(s$dpi)
# mean dpi at peak weight loss E_ferrisi - challenge
s <-
Challenge %>%
group_by(Mouse_ID, infection) %>%
filter(infection == "challenge", Parasite_challenge == "E_ferrisi",
relative_weight == min(relative_weight))
mean(s$dpi)
model <- lm(WL_max ~ mouse_strain, data = lab)
summary(model)
# create a new combined variable
Challenge_p <- Challenge %>%
filter(infection == "primary") %>%
mutate(Parasite = Parasite_primary)
Challenge_c <- Challenge %>%
filter(infection == "challenge") %>%
mutate(Parasite = Parasite_challenge)
Challenge <- rbind(Challenge_p, Challenge_c)
rm(Challenge_c, Challenge_p)
model2 <- lm(weight_loss ~ infection * Parasite, data = Challenge)
summary(model2)
rm(chale, challenge, Eim_strains, eimeria_weight_chal, eimeria_weight_challenge,
eimeria_weight_prim, h_w, m_s, map_hybrids, model, model2, mouse_WL,
ooc_challenge, ooc_primary, panel_figure, panel_hybr, parasite_WL, primary,
Rwc, Rwp, s, strains_weight, strains_weight_challenge, world_map)
eimeria_weight_challenge
italics_y(eimeria_weight_challenge, labels) -> eimeria_weight_challenge
## primary vs challenge infection
ggplot(lab,
aes(x = WL_max, y = current_infection, fill = current_infection)) +
geom_density_ridges(jittered_points = TRUE,
position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21,
point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain") +
scale_fill_manual(values = color_mapping) +
facet_wrap(~ infection) -> eimeria_weight_challenge
eimeria_weight_challenge
italics_y(eimeria_weight_challenge, labels) -> eimeria_weight_challenge
## primary vs challenge infection
ggplot(lab,
aes(x = WL_max, y = current_infection, fill = current_infection)) +
geom_density_ridges(jittered_points = TRUE,
position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21,
point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3),
legend.text = element_markdown()) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain") +
scale_fill_manual(values = color_mapping, labels = labels) +
facet_wrap(~ infection) -> eimeria_weight_challenge
eimeria_weight_challenge
italics_y
## primary vs challenge infection
ggplot(lab,
aes(x = WL_max, y = current_infection, fill = current_infection)) +
geom_density_ridges(jittered_points = TRUE,
position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21,
point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain") +
facet_wrap(~ infection) -> eimeria_weight_challenge
eimeria_weight_challenge
italics_y(eimeria_weight_challenge, labels) -> eimeria_weight_challenge
eimeria_weight_challenge
source("~/GitHub/Hybrid_health_outcomes/code/design/design_experimental.R")
# ***********************************************************
# Title: Predicting the health outcomes of infections in hybrid mice
# Purpose: This script defines all the settings and executes
#         all the code (.R, .md) to reproduce the analysis
#         of the project
#
# Authors: Fay Webster
# ID variables:
# ***********************************************************
# Part 1: Set standard settings & install packages            ----
# ***********************************************************
# Install packages/load libraries to keep R environment stable
# install
# pacman for simplified bulk pkg import
# renv for pkg consistency over time
#install.packages("pacman")
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
library(pacman)
## Standard settings ----
# seed
set.seed(13102023)
# Use p_load to install (if not already) and load the packages
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork,FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools,modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm, ggtext)
## Define within project file paths ----
# code
c <- "code"
clab      <- paste0(c, "/lab/")
cfield     <- paste0(c, "/field/")
canalysis <- paste0(c, "/analysis/")
cdesign <- paste0(c, "/design/") # experimental project design
nmi   <- paste0(c, "/nmi/")
cmodels <- paste0(c, "/models/")
# data
# building dynamic paths
# Get the user's profile directory on Windows
user_profile <- Sys.getenv("USERPROFILE")
# Append the specific path
one_drive <- file.path(user_profile, "OneDrive",
"Documents", "GitHub", "Hybrid_health_outcomes")
# relative_path is the desired path
d <- paste0(one_drive, "/data")
# labs
dlab <- paste0(d, "/lab")
dlab_raw <- paste0(dlab, "/raw")
dlab_inter <- paste0(dlab, "/intermediate")
dlab_final <- paste0(dlab, "/final")
# field
dfield <- paste0(d, "/field")
dfield_raw <- paste0(dfield, "/raw")
dfield_inter <- paste0(dfield, "/intermediate")
dfield_final <- paste0(dfield, "/final")
# data product for analysis
danalysis <- paste0(d, "/analysis")
danal_final <- paste0(danalysis, "/final")
# output
output <- paste0(one_drive, "/output")
figures <- paste0(output, "/figures")
fi <- paste0(figures, "/imputation")
an_fi <- paste0(figures, "/analysis")
d_fi <- paste0(figures, "/design")
panels_fi <- paste0(figures, "/panels")
tables  <- paste0(output, "/tables")
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
## Define functions ----
if (1) source(file.path(c, "functions.R"))
# ***********************************************************
# Part 2: Run Data cleaning - lab                        ----
# ***********************************************************
#----------------------------------------------------------*
# 2.1: Import raw data & save as intermediate/processed
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_import.R"))
#----------------------------------------------------------*
# 2.2: Conduct cleaning (formatting)
# Creates: Challenge
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_clean.R"))
#----------------------------------------------------------*
# 2.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(clab, "lab_visualize.R"))
# Creates: Correlation matrix between laboratory gene expression values
# ***********************************************************
# Part 3: Run field infection data cleaning                      ----
# **********************************************************
#----------------------------------------------------------*
# 3.1: Import raw data & save as intermediate/processed
# Requires:
# Creates: field_cleaned_data.csv
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import.R"))
#----------------------------------------------------------*
# 3.2: Conduct cleaning (formatting) w/o changing data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_clean.R"))
#----------------------------------------------------------*
# 3.3: Visualize data
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_visualize.R"))
#----------------------------------------------------------*
# 3.4: Import amplicon infection intensities and join with field
#----------------------------------------------------------*
if (1) source(file.path(cfield, "field_import_amplicon_intensities.R"))
# ***********************************************************
# Part 4:  MNI: Merge normalize impute                           ----
# ***********************************************************
#----------------------------------------------------------*
# 4.1 Merging of field and laboratory data
# Creates output: merge_prior_imputation.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_long.R"))
# 4.2 Create a dataframe with the selection of the mice in the experiments
# Creates output: mice_selection.csv
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_merge_wide.R"))
# 4.3 Normalization of data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_normalize.R"))
# 4.4 Imputation of missing data
# Creates output: genes
#----------------------------------------------------------*
if (1) source(file.path(nmi, "nmi_impute.R"))
# 4.4 Imputation of missing data
# Creates output: hm
#----------------------------------------------------------*
if (1) source(file.path(nmi, "Clean_after_impute.R"))
# 4.5 Cleaning after imputing
# Correct the parasite labels for legend
# Add custom colours for parasites throughout the scripts
# Creates factor levels for parasite strains
#----------------------------------------------------------*
# ***********************************************************
# Part 5: Experimental design                           ----
# ***********************************************************
#----------------------------------------------------------*
# Show the primary results of our experimental design
# How many rodents, distributions, strains, and parasite information
if (0) source(file.path(cdesign, "design_experimental.R"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# ***********************************************************
# Title: Predicting the health outcomes of infections in hybrid mice
# Purpose: This script defines all the settings and executes
#         all the code (.R, .md) to reproduce the analysis
#         of the project
#
# Authors: Fay Webster
# ID variables:
# ***********************************************************
# Part 1: Set standard settings & install packages            ----
# ***********************************************************
# Install packages/load libraries to keep R environment stable
# install
# pacman for simplified bulk pkg import
# renv for pkg consistency over time
#install.packages("pacman")
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
library(pacman)
## Standard settings ----
# seed
set.seed(13102023)
# Use p_load to install (if not already) and load the packages
pacman::p_load(mice, stringr, gridExtra, dplyr, tidyverse, tidyr, janitor,
visdat, corrplot, RColorBrewer, ggplot2, VIM, limma,
latticeExtra, patchwork,FactoMineR, ggrepel, factoextra,
reshape2, sjPlot, stargazer, jtools,modelsummary, ggeffects,
pheatmap, ggpubr, ggridges, gt, caret, randomForest, rfUtilities,
parasiteLoad, fitdistrplus, optimx, leaflet, magick, ggdist,
ggbeeswarm)
hm <- read.csv("data/analysis/final/imputed_clean_data.csv")
Challenge <- read.csv("data/lab/final/lab_cleaned_data.csv")
######### Decision: Removing IL.10 from gene selection due data largely missing
# remove il_10
#### vectors for selecting genes for analysis
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Select laboratory data
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Field <- hm %>%
dplyr::filter(origin == "Field")
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "skyblue")
Challenge %>%
filter(infection == "primary", Mouse_ID %in% lab$Mouse_ID,
dpi == max_dpi) %>%
summarise(n())
Challenge %>%
filter(infection == "primary", Mouse_ID %in% lab$Mouse_ID,
death == "primary", dpi == max_dpi) %>%
summarise(n())
Challenge %>%
filter(infection == "primary", Mouse_ID %in% lab$Mouse_ID,
death == "primary", dpi == max_dpi) %>%
group_by(primary_infection) %>%
summarise(n())
Challenge %>%
filter(infection == "challenge", Mouse_ID %in% lab$Mouse_ID,
dpi == max_dpi, death == "challenge") %>%
summarise(n())
Challenge %>%
filter(infection == "challenge", Mouse_ID %in% lab$Mouse_ID,
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
summarize(n())
ggplot(Challenge %>%
filter(infection == "primary", Mouse_ID %in% lab$Mouse_ID) %>%
group_by(Mouse_ID),
aes(x = WL_max, y = Parasite_primary, fill = Parasite_primary)) +
geom_density_ridges(jittered_points = TRUE,
position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21,
point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
scale_fill_manual(values = color_mapping) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain - primary infections")
Challenge %>%
filter(infection == "challenge", Mouse_ID %in% lab$Mouse_ID,
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge) %>%
summarize(n())
Challenge %>%
filter(infection == "challenge", Mouse_ID %in% lab$Mouse_ID,
!dpi == 8, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge) %>%
summarize(n())
Challenge %>%
filter(infection == "challenge", Mouse_ID %in% lab$Mouse_ID,
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge) %>%
summarize(n())
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge) %>%
summarize(n())
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
summarize(n())
unique(lab$max_dpi)
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge) %>%
summarize(n())
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge, dpi) %>%
summarize(n())
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge, dpi, WL_max) %>%
summarize(n())
lab %>%
filter(infection == "challenge",
dpi == max_dpi, death == "challenge", Position == "mLN") %>%
group_by(Parasite_challenge, dpi) %>%
summarize(n())
